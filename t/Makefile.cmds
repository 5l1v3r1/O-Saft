#! /usr/bin/make -rRf
#?
#? NAME
#?      Makefile        - makefile for testing O-Saft commands and options
#?
#? SYNOPSYS
#?      make [options] [target] [...]
#?
#? DESCRIPTION
#?      Makefile to perform testing tasks for o-saft.pl .
#?
#? LIMITATIONS
#?      Requires GNU Make > 2.0.
#?
# HACKER's INFO
#       For more details please see
#           ../Makefile  Makefile  Makefile.help  Makefile.template
#
#? VERSION
#?      @(#) Makefile.cmds 1.33 19/09/09 20:37:33
#?
#? AUTHOR
#?      18-apr-18 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

_SID.cmds       = 1.33

_MYSELF.cmds    = t/Makefile.cmds
_MY.includes   += $(_MYSELF.cmds)
_MY.inc.type   += cmds

first-cmds-target-is-default: help.test.cmds

ALL.help.test  += help.test.cmds

HELP-help.test.cmds = targets for testing '$(SRC.pl)' commands and options
help.test.cmds:       HELP_TYPE = cmds
help.test.cmds-v:     HELP_TYPE = cmds
help.test.cmds-vv:    HELP_TYPE = cmds

ifeq (,$(_SID.test))
    -include t/Makefile
endif

TEST.cmds.hosts     = localhost
ifdef TEST.hosts
    TEST.cmds.hosts = $(TEST.hosts)
endif


HELP-_cmds1         = _________________________________________ testing commands _
HELP-test.pattern-* = test group of commands with '$(TEST.cmds.hosts)'
HELP-testcmd-*      = test commands with '$(TEST.cmds.hosts)'
HELP-testcmd-*.log  = same as testcmd-* but store output in '$(TEST.logdir)/'
HELP-test.cmds.all  = test all commands with '$(TEST.cmds.hosts)'
HELP-test.cmds.log  = same as test.cmds.all but store output in '$(TEST.logdir)/'
HELP-_cmds2         = ________________________________ testing a special command _
HELP-testrun-CMD    = test specific command CMD with '$(TEST.cmds.hosts)'
HELP-testrun-CMD.log = same as testrun-CMD but store output in '$(TEST.logdir)/'
HELP-_cmds3         = __________________________________________ special targets _
HELP-testcmd-c+ignored-keys = special target using commands which return random values

HELP.cmds           = $(_NL)\
\# Targets can be executed individually, or a group of targets can be executed$(_NL)\
\# by using the pattern rule  test.pattern-%  (see Makefile).$(_NL)\
\# Examples to execute individual targets:$(_NL)\
\#    $(MAKE_COMMAND) testcmd-c+info_localhost$(_NL)\
\#    $(MAKE_COMMAND) testcmd-c+cipher--cipher-alpn_localhost$(_NL)\
\#    $(MAKE_COMMAND) testrun-+cn$(_NL)\
\# Examples to execute group of similar targets:$(_NL)\
\#    $(MAKE_COMMAND) test.pattern-+info$(_NL)\
\#    $(MAKE_COMMAND) test.pattern-+check$(_NL)\
\#    $(MAKE_COMMAND) test.pattern-+cipher$(_NL)\
\#    $(MAKE_COMMAND) test.pattern-+summ$(_NL)\
\#    $(MAKE_COMMAND) test.pattern-+vuln$(_NL)\
\# All following examples are the same:$(_NL)\
\#    $(MAKE_COMMAND) testrun-+cipher TEST.init='--header --enabled'$(_NL)\
\#    $(MAKE_COMMAND) testcmd-+cipher TEST.init='--header --enabled localhost'$(_NL)\
\#    $(MAKE_COMMAND) testcmd-+cipher TEST.args='--header --enabled localhost'$(_NL)\
\#$(_NL)\
\# Some of the examples above use  localhost  as hostname by default.

HELP.test.cmds.all  = # no special documentation yet

# Some values of keys are different by nature for each call of  o-saft.pl .
# These keys (commands) should be ignored for all  +info and +check  targets
# to avoid diffs when testing (i.e. with  *.log  targets).  To ignore output
# for the keys, the option  --no-out= is used (alias for  --ignore-output=).
# but keeps the command line shorter).
# The  ignored keys are tested with the target  testcmd-c+ignored-keys_
_ignore-output-keys = master_key session_id session_id_ctx session_ticket sts_expired
_ignore-output      = $(_ignore-output-keys:%=--no-out=%)
_ignore-output-cmds = $(_ignore-output-keys:%=+%)

# SEE Make:target name
# SEE Make:target name prefix

testcmd-c%:                     EXE.pl      = ../$(SRC.pl)
testcmd-c%:                     TEST.init   = --trace-CLI --header

testcmd-c+ignored-keys_%:       TEST.args  += $(_ignore-output-cmds)
testcmd-c+info-_%:              TEST.args  += +info               $(_ignore-output) 
testcmd-c+info--trace-cmd_%:    TEST.args  += +info  --trace-cmd  $(_ignore-output) 
testcmd-c+info--trace-key_%:    TEST.args  += +info  --trace-key  $(_ignore-output) 
testcmd-c+info--trace-time_%:   TEST.args  += +info  --trace-time $(_ignore-output) 
testcmd-c+info--trace-key-norc_%:   TEST.args  += +info   --trace-key --norc $(_ignore-output)
testcmd-c+check_%:              TEST.args  += +check              $(_ignore-output)
testcmd-c+check--nossltls_%:    TEST.args  += +check --nosslv2 --nosslv3 --notlsv1 --notlsv11 --notlsv12 --notlsv13 $(_ignore-output) 
    #    simulates a server not responding to ciphers
testcmd-c+check--trace-key_%:   TEST.args  += +check --trace-key  $(_ignore-output) 
testcmd-c+check--trace-time_%:  TEST.args  += +check --trace-time $(_ignore-output) 
testcmd-c+check--trace-norc_%:  TEST.args  += +check --trace-cmd --trace-time --trace=2 --norc $(_ignore-output) 
testcmd-c+check--trace-key-norc_%:  TEST.args  += +check  --trace-key --norc $(_ignore-output) 
testcmd-c+cipher-_%:                TEST.args  += +cipher
testcmd-c+cipher--legacy-owasp_%:   TEST.args  += +cipher --legacy=owasp
testcmd-c+cipher--force-openssl_%:  TEST.args  += +cipher --force-openssl
testcmd-c+cipher--cipher-openssl_%: TEST.args  += +cipher --cipher-openssl
testcmd-c+cipher--cipher-alpn_%:    TEST.args  += +cipher --cipher-alpn
testcmd-c+cipher--cipher-npn_%:     TEST.args  += +cipher --cipher-npn
testcmd-c+cipher--cipher-curves_%:  TEST.args  += +cipher --cipher-curves
#TODO: testcmd-c+cipher--cipher-npns-%:  TEST.args  += +cipher --cipher-npns=,
#TODO: testcmd-c+cipher--cipher-npns-%:  TEST.args  += +cipher --cipher-npns=, --cipher-npns=,,
#TODO: testcmd-c+cipher--cipher-npns-%:  TEST.args  += +cipher --cipher-npns=, --cipher-npns=ecdh_x448
testcmd-c+cipherall_%:          TEST.args  += +cipherall
testcmd-c+cipherraw_%:          TEST.args  += +cipherraw
testcmd-c+cipher-dh_%:          TEST.args  += +cipher-dh
testcmd-c+cipher-default_%:     TEST.args  += +cipher-default
testcmd-c+ciphercheck_%:        TEST.args  += +ciphercheck
testcmd-c+cipher--nossltls_%:   TEST.args  += +cipher --nosslv2 --nosslv3 --notlsv1 --notlsv11 --notlsv12 --notlsv13
    #    simulates a server not responding to ciphers
testcmd-c_vuln-+BEAST_%:        TEST.args  += +BEAST
testcmd-c_vuln-+CRIME_%:        TEST.args  += +CRIME
testcmd-c_vuln-+DROWN_%:        TEST.args  += +DROWN
testcmd-c_vuln-+FREAK_%:        TEST.args  += +FREAK
testcmd-c_vuln-+POODLE_%:       TEST.args  += +POODLE
testcmd-c_vuln-+logjam_%:       TEST.args  += +logjam
testcmd-c_vuln-+lucky13_%:      TEST.args  += +lucky13
testcmd-c_vuln-+Sloth_%:        TEST.args  += +Sloth
testcmd-c_vuln-+Sweet32_%:      TEST.args  += +Sweet32
testcmd-c_summ-+bsi_%:          TEST.args  += +bsi
testcmd-c_summ-+TR-02102+_%:    TEST.args  += +TR-02102+
testcmd-c_summ-+EV_%:           TEST.args  += +EV
testcmd-c_summ-+quick_%:        TEST.args  += +quick --trace-arg
testcmd-c_summ-+ocsp_%:         TEST.args  += +ocsp
testcmd-c_summ-+preload_%:      TEST.args  += +preload
testcmd-c_summ-+protocols_%:    TEST.args  += +protocols
testcmd-c_summ-+fingerprints_%: TEST.args  += +fingerprints
testcmd-c_summ-+sizes_%:        TEST.args  += +sizes
testcmd-c_summ-+pfs_%:          TEST.args  += +pfs
testcmd-c_summ-+sni_%:          TEST.args  += +sni
testcmd-c_summ-+vulns_%:        TEST.args  += +vulns
testcmd-c_summ-+http_%:         TEST.args  += +http  --ignore-output=sts_expired
testcmd-c_summ-+hsts_%:         TEST.args  += +hsts  --ignore-output=sts_expired
testcmd-c_summ-+sts_%:          TEST.args  += +sts   --ignore-output=sts_expired
    # +sts_expired may return current timestamp, hence output ignored to avoid diffs

test.cmds.log-compare:  TEST.target_prefix  = testcmd-c
test.cmds.log-move:     TEST.target_prefix  = testcmd-c
test.cmds.log:          TEST.target_prefix  = testcmd-c

# SEE Make:target matching
# NOTE: no sort because we want the sequence of target definitions above.
ALL.testcmds    = $(shell awk -F% '($$1 ~ /^testcmd-c./){arr[$$1]=1}$(_AWK_print_arr_END)' $(_MYSELF.cmds))
ALL.test.cmds   = $(foreach host,$(TEST.cmds.hosts),$(ALL.testcmds:%=%$(host)))
ALL.test.cmds.log  += $(ALL.test.cmds:%=%.log)

test.cmds.all:  $(ALL.test.cmds)
test.cmds:      test.cmds.all
test.cmds.log:  $(ALL.test.cmds.log) test.log-compare-hint

# For calling various targets together and other examples,
# see  test.pattern-%  pattern rule

# testrun target to allow something like:  testrun-+my-fancy-command
# NOTE: testrun-+%  and not  testrun+%  is used to avoid double definition of
# the pattern rule (problem in GNU Make), this restricts the usage to pattern
# starting with  + , unfortunately.
# EXE.pl  and  TEST.init  will be inherited from  testcmd-c% .
testrun-+%:     TEST.args  += $(TEST.cmds.hosts)
testrun-%: testcmd-%
	@$(TRACE.target)

# TODO: implement following
#     $(MAKE_COMMAND) testrun-+cn\ --traceCMD
#     $(MAKE_COMMAND) testrun-'+cn --traceCMD'
#     $(MAKE_COMMAND) testrun-'+cipher --enabled'

# TODO: use target _no-hosts

#_____________________________________________________________________________
#_____________________________________________________________________ test __|

# feed main Makefile
ALL.tests      += $(ALL.test.cmds)
ALL.tests.log  += $(ALL.test.cmds.log)


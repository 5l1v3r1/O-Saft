#! /usr/bin/make -rRf
#?
#? NAME
#?      Makefile    - makefile for help targets of O-Saft project
#?
#? SYNOPSYS
#?      make [options] [target] [...]
#?
#? DESCRIPTION
#?      Makefile with help targets for O-Saft project.  It also describes the
#?      (special) syntax used in all Makefiles of the project.
#?
#? EXAMPLES
#?          make help.doc
#?          make help.syntax
#?          make macro macro=MAKEFILE
#?          make m-MAKEFILE
#?          make echo  echo=MAKEFILE
#?          make e-MAKEFILE
#?          make p-MAKEFILE
#?          make t-help.doc
#?          make targets
#?          make targets.me
#?
#? LIMITATIONS
#?       Requires GNU Make > 2.0.
#?
# HACKER's INFO
#    Description used for target  help.syntax  .
#.
#.   Terms used for description of makefiles
#.      The term  makefile(s)  is used, when files to be used as input for make
#       in general are meant.
#.      The term  Makefile  is used, when  a particular file  is meant (usually
#.      the file itself in which the term is used).
#.      The terms  target,  target rule  or simply  rule  are used, when make's
#.      rules are meant (a rule consist of dependencies and recipes).
#.      The term  host  or  hostname  is used for a system (wether it is a FQDN
#.      or an IP) to be tested with $(EXE.pl).
#.      The term  argument(s)  is used, when (command line) arguments for to be
#.      passed to $(EXE.pl) are meant.
#.      The terms  macro  and variable  are used interchangeable.
#.
#.      Note that the O-Saft's documentation uses  target  for the system to be
#.      tested.
#.      Also:  arguments  are  commands and options  in O-Saft's documentation.
#.
#.   Syntax used in all makefiles
#.      For extracting information from the Makefiles, i.e macros/variables and
#.      targets and their definitions, following special syntax is used:
#.          * All texts for documentation (help) are stored in variables.
#.          * All these variables are named with the prefix  HELP- .
#.          * Anything following the prefix is the name of an existing target,
#.            example:   HELP-doc  contains the description of the target  doc
#.          * Variable names with prefix  HELP-_  are treated as header texts,
#.            example:   HELP-_help = ____ targets for help about Makefile _
#.          * The variable with the prefix  HELP. for example  HELP.help, con-
#.            tains additional documentation; as the variable usually contains
#.            multiline texts, each line must be terminated by  $(_NL)\  which
#.            will be evaluated when the variable is used. It is good practice
#-            to start each line with  \# .
#.          * The value of a variable needs not to be quoted.  However, quotes
#.            may or may not be needed when the value is evaluated.
#.
#.      Targets in the makefiles are grouped.  Each group is headed by the help
#.      texts for the targets.  The first line of this group should be a header
#.      text describing the group. Example:
#.          HELP-_group     = _______________________________ some targets _
#.          HELP-help       = print overview of all targets
#.          HELP-doc        = same as help, but evaluates macros
#.      These variables are used by the  help  and  doc  target.  Each of these
#.      lines is printed as follows (from example above):
#.                   #_______________________________ some targets _
#.          help     # print overview of all targets
#.          doc      # same as help, but evaluates variables
#.
#.      To extract and format the texts, the targets use external tools, mainly
#.      awk,  sed  and  tr.  Each tool including its command line arguments  is
#.      defined as variable, see corresponding  EXE.*  variables.
#.
#.      All variable names used for help texts use - (dash) instead of . (dot).
#.      This simplifies matching the names, as the dash is not a meta character
#.      in RegEx and so must not be escaped.
#.      Exception is the  HELP.something  variable, which defines the help text
#.      for the corresponding Makefile itself (it must not be matched).
#.
#.      Unfortunately some of the macros use variables of the makefile,  like
#.      $(T), while other macros must use the TAB character verbatim,  which is
#.      difficult to identify by human eyes.
#.
#.      The main difference between the target  help  and  doc  is, that  help
#.      uses external tools to extract the information from the makefile, while
#.      doc  uses  make's functionality to display the same information,  which
#.      also evaluates variables used in the targets. Both targets use the same
#.      text.
#.      The  EXE.*  macros used by these targets take care for the formatting.
#.      They rely on the above conventions for variable names.
#.
#.      Additional to the help targets described above, there are targets which
#.      show information about variables and targets:
#.           list, echo, show, macro, pmacro, target
#.      These targets show the information,  which is passed in a variable with
#.      the same name as the target itself. Example:
#.          make macro macro=MAKEFILE
#.      To simplify such command lines, a special pattern rule exists  for each
#.      of these targets. Example:
#.          make m-MAKEFILE
#.      These targets search in  all makefiles, they use  $(MAKEFILE_LIST)  and
#.      and not our own  $(ALL.Makefiles).  This way the targets work, somehow,
#.      in all other makefiles too (as they include this one).
#.
#.   Naming conventions for targets:
#.          _tst_name    - internal target, not iintended for public use
#.          tst.name     - public available targets use  .  (dot) as separator
#.          tst-name     - internal and pattern rule targets use  -  (dash) as
#.                          separator
#.          tst.name_arg - some pattern rule targets use  _  to pass parameters
#.          tst.name.log - same as  test.name  but store results in logfile
#.          tst%ext      - pattern rule used instead of explicit target rule to
#.                         allow spelling variants, like tst.ext or tst-ext
#.
#.   Makefiles and Includes
#.      SEE Make:include
#.
#.   Makefiles
#.      All targets of the Makefiles --the make system-- are for testing O-Saft
#.      functionality, code quality, and performance.
#.      All testing functionality is grouped in individual makefiles. All these
#.      makefiles reside in the $(TEST.dir) directory (usually ./t ).  The main
#.      Makefile simply includes all other files. The includes are organised as
#.      follows:
#.          Makefile
#.              include t/Makefile
#.                  include t/Makefile.help
#.                  include t/Makefile.inc
#.                  include t/Makefile.warnings
#.                  include t/Makefile.cmds
#.                  include t/Makefile.exit
#.                  include t/Makefile.opt
#.                  include t/Makefile.ext
#.                  include t/Makefile.cgi
#.                  include t/Makefile.hlp
#.                  include t/Makefile.tcl
#.                  include t/Makefile.misc
#.                  include t/Makefile.critic
#.
#.      To get a list of all makefiles, use:
#.          make s-_MY.includes
#.
#.      Each of the t/Makefile.*  includes  t/Makefile. This allows to use each
#.      Makefile.* on its own, like:
#.          make -f t/Makefile.exit
#.          cd t && make -f Makefile.exit
#.
#.      The default target in each makefile simply prints a brief help.
#.
#.      Most included t/Makefiles.* contain very limited comments.  For general
#.      details of their functionality, see t/Makefile.template t/Makefile.pod.
#.
#.   Quick Hints
#.      There are a bunch of targets which provide information about the macros
#.      and targets from the Makefiles itself.  They are mainly meant to show a
#.      readable (for humans) information  in contrast to the sometimes cryptic
#.      syntax of makefiles can do. This is done in  Makefile.help , see:
#.          make -f t/Makefile.help
#.      To get brief (mainly technical) information about a makefile, use:
#.          make -f t/Makefile.cgi
#.          make -f t/Makefile.cgi targets.me
#.          make -f t/Makefile.cgi macros.me
#.          make -f t/Makefile.cgi s-ALL.test.cgi
#.          ...
#.
#.   Special Syntax (here in this file)
#.      To extract the syntax documentation, all the lines start with  #. , see
#.      EXE.syntax  also.
#.
#? VERSION
#?      @(#) Makefile.help 1.62 19/07/03 15:05:43
#?
#? AUTHOR
#?      18-apr-18 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

_SID.help       = 1.62

_MYSELF.help    = t/Makefile.help
_MY.includes   += $(_MYSELF.help)
_MY.inc.type   += help

MAKEFLAGS      += --no-builtin-variables --no-builtin-rules
.SUFFIXES:

first-help-target-is-default: help.help

ALL.help.test  += help.test.help

HELP-help.help  = targets to get information/documentation from Makefiles

#_____________________________________________________________________________
#________________________________________________________________ variables __|

# internal variables
_TAB            = \\011
_NL             = \\012
_CR             = \\015
T               = $$""(_NL)

# internal help
# default dummy  HELP_TYPE  to avoid errors; results in wrong output
# however, its for development and testing only; help*-v  may give hints
HELP_TYPE       = help
# some often uses formatting strings
HELP_INFO       = \# Name          | Description/Content
HELP_NAME       = \# Macro/Variable| Value
HELP_RULE       = \# Target        | Description
HELP_LINE       = \#---------------+--------------------------------------------------------------
HELP_HEAD       = $(HELP_NAME)
HELP_HEADER     = $(HELP_LINE)\012$(HELP_HEAD)\012$(HELP_LINE)
HELP_USAGE      = **USAGE:  $(MAKE_COMMAND) $($@) '$($@)=your-query'
HELP_F_TARGET   = _file
doc.all-v:HELP_F_TARGET = _file-v

# HELP_HEAD and HELP_RULE  will be set conditionally per target/rule also

# setting if Makefile.inc not included
help.inc: HELP_TYPE = inc
help.inc: HELP_HEAD = $(HELP_RULE)

# define scripts as variables, for better human readability
# for details about the commands, please see  Syntax  above for matching macro
# and target names, and
# SEE Make:target matching
# script variables defined in t/Makefile:
#     _AWK_macro_by_line    - extract macro  names
#     _AWK_target_by_line   - extract target names
#     _AWK_target_to_arr    - extract target names and store uniquely in arr[]
#     _AWK_print_arr_END    - print collected data from arr[]
#     _AWK_print_file       - either print seperator line or the filename
# defined below:
#     _AWK_HELP_by_line     - extract HELP- macro names for documentation, the
#                             HELP-_* print as is
#                             HELP-*  extract target name and print with text
#     _AWK_gen_eval_target  - print f-* and _f-* target name from HELP-* macro
_AWK_HELP_by_line   = /^HELP-_/{sub(/ /,"",$$2); print "\n\t\t\#"$$2; next} \
                      /^HELP-/{ key=$$1; txt=substr($$0,index($$0,"=")+2);\
                                sub(/HELP-/,"",key); gsub(/ /,"",key);    \
                                tab="\t"; if(length(key)<8){tab="\t\t";}  \
                                printf("%s%s\# %s\n",key,tab,txt);         \
                              }
_AWK_gen_eval_target= /^HELP-_/{print "_f-"$$1}/^HELP-[^ _]/{sub(/HELP-/,"");print "f-"$$1}
_AWK_gen_print_file = (FNR==1){ print "$(HELP_F_TARGET)"FILENAME}
%-v: _AWK_print_file= (FNR==1){ print "\n\t\t\# ---------- "FILENAME" ..." }

# tools used to gather information from herein
# take care! real TABS are inside the sed commands
# prefer awk where possible, as sed matches last occurrence of a pattern
EXE.eval        = awk -F=   '$(_AWK_gen_print_file)$(_AWK_gen_eval_target)'
EXE.list        = awk       '$(_AWK_print_file)$(_AWK_macro_by_line)'
EXE.help        = awk -F=   '$(_AWK_print_file)$(_AWK_HELP_by_line)'
EXE.macro       = sed -n -e '/^$($@)[ 	:+]*=/{' \
			 -e ':m' -e 'p' -e '/\\$$/{' -e 'n' -e 'bm' -e '}' -e '}'
EXE.pmacro      = sed -n -e '/.*$($@).*[        :+]*=/{' \
			 -e ':m' -e 'p' -e '/\\$$/{' -e 'n' -e 'bm' -e '}' -e '}'
EXE.target      = sed -n -e ':t' -e '/^[^:\#]*$($@)[^:\#]*[:]/{' \
			 -e ':c' -e 'p' -e 'n' -e '/^       /bc' -e 'bt' -e '}'
EXE.targets     = awk       '$(_AWK_print_file)$(_AWK_target_by_line)'
EXE.syntax      = sed -n -e 's/^\#\.//p'
EXE.wordperline = tr -s " $(_TAB)" "$(_NL)$(_NL)"
#               # must use " so that make's variables are evaluated correctly
EXE.wordperline = awk '{for(i=1;i<=NF;i++){printf("\t\t  %s\n",$$i)}}'

# NOTE: all EXE.* macros above cannot be shown using echo, eval or show target
#       they all may return errors like: /bin/sh: 1: Syntax error:...

ifndef EXE.dummy
    EXE.dummy   = /bin/echo -n ""
endif

ifndef _MYSELF.inc
    # dummy setting until Makefile.inc is included, keeps errors away
    _MYSELF.inc = t/Makefile.inc
endif

#_____________________________________________________________________________
#_________________________________________________________ internal targets __|

_HELP-_help0    = _________________________________ targets for internal use _
_HELP-help.HEAD = print table header for documentation texts
_HELP-help.BODY = print table body   for documentation texts (all HELP-* lines)
_HELP-help.FOOT = print table footer for documentation texts
_HELP-help.HELP = print individual documentation texts (HELP.TYP variale)
#HELP-help.LIST = print targets for getting list of targets (testing targets only)
_HELP-help.LIST = $(_NL)\
\# To get a list of targets, use:$(_NL)\
\#    make help.test.$(HELP_TYPE).all$(_NL)\
\#    make e-ALL.test.$(HELP_TYPE)$(_NL)\
\#    make s-ALL.test.$(HELP_TYPE)

_HELP-help.make = $(_NL)\
\# To see which commands in a TARGET are executed, simply call 'make -n TARGET'$(_NL)\
\# Note that the *.log targets then report a bunch of shell commands.$(_NL)\

_help.HEAD:
	@echo "$(HELP_HEADER)"

_help.FOOT:
	@echo "$(HELP_LINE)"

_help.BODY:
	@$(TRACE.target)
	@$(EXE.help) $(_MYSELF.$(HELP_TYPE))

_help.LIST:
	@$(TRACE.target)
	@echo "$(_HELP-help.LIST)"

# neet to set own variable name because $($(HELP.$(HELP_TYPE))) does not work
_help.HELP:  _HELP_HELP = HELP.$(HELP_TYPE)
_help.HELP:
	@$(TRACE.target)
	@echo "$($(_HELP_HELP))"
	@echo "$(_HELP-help.make)"

# Following target  lists the used (included) t/Makefile.* , each with its
# description as defined in the file itself in the HELP-help.text.* macro
_HELP-maketitle = \#__________________________________ purpose of t/Makefile.* _
_HELP.maketitle = $(ALL.inc.type:%=help-make-%)
_help.makefiles:
	@$(TRACE.target)
	@echo "\n\t\t$(_HELP-maketitle)"
	@$(MAKE) -s $(_HELP.maketitle)

.PHONY: _help.HEAD _help.BODY _help.FOOT _help.LIST _help.HELP _help.makefiles

#_____________________________________________________________________________
#_____________________________________________________________ help targets __|

# line printed with help should work copy&paste, hence some summy definitions
MYmacro         = dummy macro/variable used in examples
MYtarget: MYVAR = dummy target macro used in examples
MYtarget: dummy_dependency
	@$(EXE.dummy)

HELP-_help1     = __________________________ targets for help about Makefile _
HELP-macros     = list all macro names used in Makefile* (alias: list, vars)
HELP-targets    = list all targets used in Makefile* (alias: rules)
HELP-macros.me  = list all macro names used in calling Makefile
HELP-targets.me = list all targets used in calling Makefile
HELP-e-MYmacro  = show content of MYmacro expanded (all in one line)
HELP-s-MYmacro  = show content of MYmacro expanded (one word per line)
HELP-m-MYmacro  = show definition of MYmacro as is      - exact macro match
HELP-p-MYmacro  = show all definitions of MYmacro as is - macro pattern match
HELP-t-MYtarget = show MYtarget                         - exact target match

HELP-_help2     = ________________________________ targets for documentation _
HELP-help.help  = print this documentation
HELP-help.doc   = same as help.help
HELP-help.all   = print all targets, including test and development targets
#               # HELP-help.all - same as in ../Makefile (cannot be reused)
HELP-help.test  = print documentation about test targets
HELP-help.critic= print documentation about perlcritic targets
#               # HELP-help.critic - also in Makefile.critic (a bit different)
HELP-help.syntax= print documentation about syntax used in Makefile.*
HELP-help.test.help = print targets for testing makefile help targets
HELP-help.makefiles = print documentation about available Makefile.*

HELP.help       = $(_NL)\
\# To see in which Makefile* the listed targets are defined, use following:$(_NL)\
\#    $(MAKE_COMMAND) help.all-v        $(_NL)\
\# The targets to show information/content from the Makefile are:$(_NL)\
\#    echo eval macro pmacro show target$(_NL)\
\# which are used like:                 $(_NL)\
\#    $(MAKE_COMMAND) echo  echo=MYVAR  $(_NL)\
\#    $(MAKE_COMMAND) macro macro=MYVAR $(_NL)\
\# For easy use, following alias exist: $(_NL)\
\#    e-  m-  p-  s-  t-                $(_NL)\
\# which are used like:                 $(_NL)\
\#    $(MAKE_COMMAND) e-MYmacro         $(_NL)\
\#    $(MAKE_COMMAND) m-MYmacro         $(_NL)\
\#    $(MAKE_COMMAND) p-MYmacro         $(_NL)\
\#    $(MAKE_COMMAND) s-MYmacro         $(_NL)\
\#    $(MAKE_COMMAND) t-MYtarget        $(_NL)\

ALL.help       += help.help help.critic help.syntax
ALL.help       += $(ALL.help.test)
                # add all other help.test* targets

# our own targets using help% or alike
help.help:        HELP_TYPE = help
help.help%:       HELP_TYPE = help
help.help:        HELP_HEAD = $(HELP_RULE)
help.help%:       HELP_HEAD = $(HELP_RULE)
help.doc%:        HELP_HEAD = $(HELP_RULE)
help.doc.all:     HELP_HEAD = $(HELP_RULE)
target:           HELP_HEAD = $(HELP_RULE)

help.%: _help.HEAD _help.BODY _help.makefiles _help.FOOT _help.LIST _help.HELP
	@$(TRACE.target)

#  legacy aliases
help.doc: help.help

help.syntax:
	@$(TRACE.target)
	$(EXE.syntax) $(_MYSELF.help)

help.makefiles: _help.makefiles
	@$(TRACE.target)

.PHONY: help.doc help.syntax


# Following  file%  targets are used for doc.all target only, they are just a
# dirty hack so that output of target help.all and doc.all are similar.
# NOTE: quick&dirty as  $(TEST.dir)  is hardcoded as t/ in the target names.
_FILE_LINE  = \#-------------------------------------------------------------
_filet/%: _file-egal
	@echo ""
	@echo "\t\t$(_FILE_LINE)"
_file%:
	@echo ""
	@echo "\t\t$(_FILE_LINE)"
_file-vt/%:
	@echo ""
	@echo "\t\t# ---------- t/$* ..."
_file-v%:
	@echo ""
	@echo "\t\t# ---------- $* ..."

#dbx _isempty:  @echo "# target: $($@) - $($($@))."
# NOTE: following target is adapted to be use in echo, show, macro and target
#       targets, hence the target name must be recursively evaluated, that's
#       why we use  $($($@)) instead of $($@)
_notempty:
	@if [ '$($($@))' = '' ]; then \
	    $(ECHO) "$(HELP-$($@))"; \
	    $(ECHO) "$(HELP_USAGE)"; \
	    exit 1; \
	fi;
	@$(ECHO) "$(HELP_HEADER)"

_line:
	@echo ""
	@$(ECHO) "$(_TAB)$(_TAB)#$($($@))"

.PHONY: _notempty _line

help-make-%:
	@$(TRACE.target)
	@$(ECHO) "Makefile.$*$(_TAB)# $(HELP-help.test.$*)"

macros:
	@$(TRACE.target)
	@$(EXE.list) $(MAKEFILE_LIST)    | sort
macros%me:
	@$(TRACE.target)
	@$(EXE.list) $(MAKEFILE)         | sort
vars: macros
list: macros
lists%me: macros.me

targets:
	@$(TRACE.target)
	@$(EXE.targets) $(MAKEFILE_LIST) | sort -u
targets%me:
	@$(TRACE.target)
	@$(EXE.targets) $(MAKEFILE)      | sort -u
rules: targets
rules%me: targets.me

# eval target quick&dirty:
#       @$(ECHO) "$($@)$(_TAB)$(_TAB)# $(HELP-$($@))"
# pretty printed format using awk see below
eval:
	@$(TRACE.target)
	@$(ECHO) "$($@) $(HELP-$($@))" | awk '{t="\t# ";if(length($$1)<8){t="\t\t# ";}sub(/ /,t);print}'

echo:
	@$(TRACE.target)
	@$(ECHO) '$($($@))'

show: _notempty=show
show: _notempty
	@$(TRACE.target)
	@$(ECHO) '$($@) = '
	@$(ECHO) '$($($@))' | $(EXE.wordperline)

macro: _notempty=macro
macro: _notempty
	@$(TRACE.target)
	@$(EXE.macro) $(MAKEFILE_LIST)
makro: macro

pmacro: _notempty=pmacro
pmacro: _notempty
	@$(TRACE.target)
	@$(EXE.pmacro) $(MAKEFILE_LIST)

target: _notempty=target
target: _notempty
	@$(TRACE.target)
	@$(EXE.target) $(MAKEFILE_LIST)

# following rules are shortcuts for the above targets
e-%:
	@$(MAKE) -s echo=$* echo
f-%:
	@$(MAKE) -s eval=$* eval
_f-%:
	@$(MAKE) -s _line=$* _line
s-%:
	@$(MAKE) -s show=$* show
m-%:
	@$(MAKE) -s macro=$* macro
p-%:
	@$(MAKE) -s pmacro=$* pmacro
t-%:
	@$(MAKE) -s target=$* target

.PHONY: macros targets rules list vars eval echo show macro pmacro target

#_____________________________________________________________________________
#_____________________________________________________________________ test __|

HELP-_help4     = _____________________________________ testing help targets _
HELP-test.help      = test help* targets of our Makefiles
HELP-test.help.log  = same as test.help but store output in '$(TEST.logdir)/'
HELP-test.help.log-compare  = compare results of test.help.log (if any)

# testcmd-% pattern rule uses the stem as argument to the executed command
# this is all we need, hence all other arguments must be set empty
# help target itself is special as defined in global Makefile only
testcmd-help:                   EXE.pl      = $(MAKE)
testcmd-help:                   TEST.dir    = .
#testcmd-help:                   TEST.init   =

testcmd-help%:                  EXE.pl      = $(MAKE)
testcmd-help%:                  TEST.init   =

testcmd-help:                   TEST.args  +=
#testcmd-doc:                    TEST.args  +=  # TODO: testcmd-doc* not workin as it not matches testcmd-help*
#testcmd-doc.all:                TEST.args  +=  # TODO: dito
#testcmd-doc.all-v:              TEST.args  +=  # TODO: dito
testcmd-help.help:              TEST.args  +=
testcmd-help.all:               TEST.args  +=
testcmd-help.help.all:          TEST.args  +=
testcmd-help.help.all-v:        TEST.args  +=
testcmd-help.doc:               TEST.args  +=
testcmd-help.doc.all:           TEST.args  +=
testcmd-help.syntax:            TEST.args  +=
# TODO: following conditions should be automatically set using $(_MY.inc.type)
testcmd-help.test.help:         TEST.args  +=
testcmd-help.test.make:         TEST.args  +=
#testcmd-help.critic:            TEST.args  +=  # not used as it is the same as testcmd-help.test.critic
testcmd-help.test:              TEST.args  +=
testcmd-help.test.cgi:          TEST.args  +=
testcmd-help.test.cmds:         TEST.args  +=
testcmd-help.test.opt:          TEST.args  +=
testcmd-help.test.ext:          TEST.args  +=
testcmd-help.test.exit:         TEST.args  +=
testcmd-help.test.hlp:          TEST.args  +=
testcmd-help.test.misc:         TEST.args  +=
testcmd-help.test.tcl:          TEST.args  +=
testcmd-help.test.critic:       TEST.args  +=
testcmd-help.test.warnings:     TEST.args  +=
testcmd-help.test.all:          TEST.args  +=
testcmd-help.test.cgi.all:      TEST.args  +=
testcmd-help.test.cmds.all:     TEST.args  +=
testcmd-help.test.doc.all:      TEST.args  +=
testcmd-help.test.opt.all:      TEST.args  +=
testcmd-help.test.ext.all:      TEST.args  +=
testcmd-help.test.exit.all:     TEST.args  +=
testcmd-help.test.hlp.all:      TEST.args  +=
testcmd-help.test.misc.all:     TEST.args  +=
testcmd-help.test.tcl.all:      TEST.args  +=
testcmd-help.test.critic.all:   TEST.args  +=
testcmd-help.test.warnings.all: TEST.args  +=

test.help.log-compare:  TEST.target_prefix  = testcmd-help
test.help.log-move:     TEST.target_prefix  = testcmd-help
test.help.log:          TEST.target_prefix  = testcmd-help

ALL.testhelp        = $(shell awk -F: '/^testcmd-help%/{next} /^testcmd-help/{arr[$$1]=1}$(_AWK_print_arr_END)' $(_MYSELF.help))
#                   # awk collect target herein (duplicates are ignored)
ALL.test.help       = $(ALL.testhelp)
ALL.test.help.log   = $(ALL.test.help:%=%.log)

# TODO: explain test.help uses "make help", while test.hlp uses "o-saft.pl --help"
test.help.all:    $(ALL.test.help)
test.help:        test.help.all
test.help.log:    $(ALL.test.help.log) test.log-compare-hint

.PHONY: test.help.log

# feed main Makefile
ALL.tests          += $(ALL.test.help)
ALL.tests.log      += $(ALL.test.help.log)


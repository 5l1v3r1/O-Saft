#! /usr/bin/make -rRf
#?
#? NAME
#?      Makefile        - makefile for performing perlcritic in project
#?
#? SYNOPSYS
#?      make [options] [target] [...]
#?
#? DESCRIPTION
#?      Makefile to perform testing tasks with perlcritic
#?
#? LIMITATIONS
#?      Requires GNU Make > 2.0.
#?
# HACKER's INFO
#       For details please see ../Makefile .
#
#       Naming conventions for targets see Makefile.help .
#
#       TODO:
#          * complete with tests from t/test-o-saft.cgi.sh
#
#? VERSION
#?      @(#) Makefile.critic 1.19 19/09/10 22:18:43
#?
#? AUTHOR
#?      18-apr-18 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

_SID.critic     = 1.19

_MYSELF.critic  = t/Makefile.critic
ALL.includes   += $(_MYSELF.critic)
ALL.inc.type   += critic

first-critic-target-is-default: help.test.critic

ALL.help.tests += help.test.critic

HELP-help.test.critic   = targets for using perlcritic
help.critic:              HELP_TYPE = critic
help.critic-v:            HELP_TYPE = critic
help.critic-vv:           HELP_TYPE = critic
help.test.critic:         HELP_TYPE = critic
help.test.critic-v:       HELP_TYPE = critic
help.test.critic-vv:      HELP_TYPE = critic
    # not really for testing, hence we have 'critic' and 'test.critic'

ifeq (,$(_SID.test))
    -include t/Makefile
endif

#_____________________________________________________________________________
#________________________________________________________________ variables __|

CRITIC.dir      = $(TEST.dir)
CRITIC.rc       = .perlcriticrc
CRITIC.severity = -5
CRITIC.opt      =
CRITIC.pretty   =

ALL.critic      = $(SRC.pl) $(ALL.pm) $(GEN.pod)
# $(CHK.pl)

# using perlcritic's --verbose options without ( and ) ; see: man perlcritic
_CRITIC.verb8   = '%f: [%p] %m at line %l, column %c.  Severity: %s\\n'
_CRITIC.verb10  = '%f: %m at line %l, column %c.\n  %p Severity: %s\n%d\\n'
# same options, but output prefixed with filename
_CRITIC.verb8o  = --verbose $(_CRITIC.verb8)
_CRITIC.verb10o = --verbose $(_CRITIC.verb10)

CRITIC.opt      = $(_CRITIC.verb8o)
    # perlcritic --verbose 8 is default ; hence we use this modified

# some aliases
help.critic: help.test.critic
critic.help: help.test.critic
criticdoc:   help.test.critic

#_____________________________________________________________________________
#__________________________________________________ targets for testing cgi __|

HELP-_critic0       = _________________________________ targets for code quality _
HELP-critic         = check files with perlcritic
HELP-critic345      = check files with perlcritic for severity 3,4,5
HELP-help.critic    = print more details about  critic-*  targets
HELP-_critic1       =  targets calling perlcritic with additional options:
HELP-_critic3       = _________________________________________________ severity _
HELP-critic-5       = perlcritic --severity 5 <all files>
HELP-critic-4       = perlcritic --severity 4 <all files>
HELP-critic-3       = perlcritic --severity 3 <all files>
HELP-critic-2       = perlcritic --severity 2 <all files>
HELP-_critic4       = _______________________________________________ statistics _
HELP-critic-count   = perlcritic --severity 5 -count
HELP-critic-stat    = perlcritic --severity 5 --statistics-only
HELP-critic-stat-4  = perlcritic --severity 4 --statistics-only
HELP-critic-stat-3  = perlcritic --severity 3 --statistics-only
HELP-_critic5       = _____________________________________ single file severity _
HELP-c5-FILE        = perlcritic --severity 5 FILE
HELP-c4-FILE        = perlcritic --severity 4 FILE
HELP-c3-FILE        = perlcritic --severity 3 FILE
HELP-_critic6       = _____________________________ single file verbose severity _
HELP-c5v-FILE       = perlcritic --severity 5 FILE --verbose 10
HELP-c4v-FILE       = perlcritic --severity 4 FILE --verbose 10
HELP-c3v-FILE       = perlcritic --severity 3 FILE --verbose 10
HELP-_critic7       = _______________________ targets with pretty-printed output _
HELP-TARGETp        = call TARGET and pretty print output

HELP.critic         = $(_NL)\
\# Where   FILE   is any of the *.pm or *.pl files (including path).$(_NL)\
\# Where  TARGET  is any of:$(_NL)\
\#        critic critic-5 critic-4 critic-3 critic-2 critic-count critic-stat$(_NL)\
\#$(_NL)\
\# None of the  critic-*  targets is available with the  -v or -vv  suffix$(_NL)\
\# because verbose does not make sense here.$(_NL)\
\#$(_NL)\
\# Note about perlcritic used here:$(_NL)\
\#   * perlcritic is executed in directory '$(CRITIC.dir)'$(_NL)\
\#   * perlcritic uses '$(CRITIC.dir)/$(CRITIC.rc)'$(_NL)\
\# See also '$(CONTRIB.dir)/critic.sh'

HELP.test.critic.all= # no special documentation yet

#_____________________________________________________________________________
#_________________________________________________ targets for code quality __|

perlcritic-%: $(CRITIC.dir)
	@mkdir -p $@

# All targets use $(ALL.critic) as list of sources, which must be set as
# environment or on command line
# Note that $(ALL.test.critic)  is a list of targets.

# target prints command with echo so that it is also shown when called with
# "make -s critic ..."
critic: $(CRITIC.dir)
	@$(TRACE.target)
	-cd $(CRITIC.dir) && perlcritic $(ALL.critic:%=../%) $(CRITIC.severity) $(CRITIC.opt)

# Same target as above but piped to filter for pretty printing.
# Because the filter is a pipe, we loose the coloured output from perlcritic
# FIXME: gawk in critic-pretty does not work properly after 19.01.19
critic-pretty: $(CRITIC.dir)
	@$(TRACE.target)
	-cd $(CRITIC.dir) && perlcritic $(ALL.critic:%=../%) $(CRITIC.severity) $(CRITIC.opt) \
	  | awk '\
    { gsub(/\.$$/,"");  C=" remove trailing . (for --statistics-only)"; }\
    /OK$$/{ $$2=$$1; $$1="OK\t"; $$3=""; C=" toggle $1 and $2"; ok=1; } \
    /: *[0-9][0-9]*$$/{ $$0=sprintf("%d\t%s",$$2,$$1); C=" toggle $1 and $2"; } \
    /^Average /{ x=$$NF; $$NF=""; $$0=sprintf("%9s %s",x,$$0); } \
    /^Violatio/{ x=$$NF; $$NF=""; $$0=sprintf("%9s %s",x,$$0); } \
    /^[0-9 ][0-9 ,]* /{ x=$$1; $$1=""; $$0=sprintf("%9s %s",x,$$0); } \
    {\
      gsub(/\.\../,""); C=" remove leading ../"; \
      gsub(/\:$$/,"");  C=" remove trailing : (for --count)";  \
      gsub(/ was *$$/,"");  C=" remove trailing string (for --statistics-only)"; \
      print; \
    }\
    END{ if (ok==0){ $$1="failed\t"; print; }}\
'
# TODO: above gawk needs to detect errors and then print "failed  filename"

critic-5  critic-5p c5-%  c5v-%:                CRITIC.severity = -5
critic-4  critic-4p c4-%  c4v-%:                CRITIC.severity = -4
critic-3  critic-3p c3-%  c3v-%:                CRITIC.severity = -3
critic-2  critic-2p c2-%  c2v-%:                CRITIC.severity = -2
critic-2p critic-3p critic-4p critic-5p:        CRITIC.pretty   = -pretty
critic-count:   CRITIC.opt = -count
critic-stat:    CRITIC.opt = --statistics-only
critic-stat-4:  CRITIC.opt = --statistics-only
critic-stat-4:                                  CRITIC.severity = -4
critic-stat-3:  CRITIC.opt = --statistics-only
critic-stat-3:                                  CRITIC.severity = -3
#critic-countp critic-statp critic-stat-4p: # do not make sense

ALL.test.critic = critic-5 critic-4 critic-3 critic-2 \
		  critic-count critic-stat critic-stat-4 critic-stat-3

$(ALL.test.critic): critic
criticp critic-5p critic-4p critic-3p critic-2p: critic-pretty

c5-% c4-% c3-% c2-%:
	@$(TRACE.target)
	@$(MAKE) -s ALL.critic=$* critic CRITIC.severity=$(CRITIC.severity)

c5v-% c4v-% c3v-% c2v-%:
	@$(TRACE.target)
	@$(MAKE) -s ALL.critic=$* critic CRITIC.severity=$(CRITIC.severity) CRITIC.opt="$(_CRITIC.verb10o)"

$(CRITIC.dir)/perlcritic-$(_TODAY_)/severity%.txt: $(CRITIC.dir)/perlcritic-$(_TODAY_)
	@$(TRACE.target)
	@(echo "" && echo "" && echo "## Anzahl Fehler ...")    > $@
	@$(MAKE) $(MFLAGS) -s CRITIC.severity=$* critic-count  >> $@
	@(echo "" && echo "" && echo "## Statistik ...")       >> $@
	@$(MAKE) $(MFLAGS) -s CRITIC.severity=$* critic-stat   >> $@
	@(echo "" && echo "" && echo "## Fehler ...")          >> $@
	@$(MAKE) $(MFLAGS) -s CRITIC.severity=$* critic CRITIC.opt= >> $@

critic345: $(CRITIC.dir)/perlcritic-$(_TODAY_)/severity-5.txt $(CRITIC.dir)/perlcritic-$(_TODAY_)/severity-4.txt $(CRITIC.dir)/perlcritic-$(_TODAY_)/severity-3.txt

# TODO: dirty hack target critic345.log 
critic345.log:
	@rm $(CRITIC.dir)/perlcritic-$(_TODAY_)/severity-5.txt $(CRITIC.dir)/perlcritic-$(_TODAY_)/severity-4.txt $(CRITIC.dir)/perlcritic-$(_TODAY_)/severity-3.txt
	@$(MAKE) $(MFLAGS) -s critic345

.PHONY: critic critic-5 critic-4 critic-3 critic-2 critic345 critic345.log

test.critic.all:  $(ALL.test.critic)
test.critic:      test.critic.all

#_____________________________________________________________________________ 
#_____________________________________________________________________ test __|

# feed main Makefile
ALL.tests      += $(ALL.test.critic)
#ALL.tests.log  +=

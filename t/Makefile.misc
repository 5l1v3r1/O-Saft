#! /usr/bin/make -rRf
#?
#? NAME
#?      Makefile        - makefile for various O-Saft tests
#?
#? SYNOPSYS
#?      make [options] [target] [...]
#?
#? DESCRIPTION
#?      Makefile containing general testing targets for O-Saft project.
#?
#? LIMITATIONS
#?      Requires GNU Make > 2.0.
#?
# HACKER's INFO
#       For details please see ../Makefile .
#
#       Naming conventions for targets see ../Makefile.help .
#
#? VERSION
#?      @(#) Makefile.misc 1.15 19/01/13 12:32:53
#?
#? AUTHOR
#?      18-apr-18 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

_SID.misc       = 1.15

_MYSELF.misc    = t/Makefile.misc
ALL.includes   += $(_MYSELF.misc)
ALL.inc.type   += misc

first-misc-target-is-default: help.test.misc

ifeq (,$(_SID.test))
    -include t/Makefile
endif

HELP.misc       = "\
\#               ____________________________________________ misc. tests _$(_NL)\
 test.bench      - call '$(EXE.bench)' for some benchmarks$(_NL)\
 test.bench.log  - call '$(EXE.bench)' and save result in '$(BENCH.times)'$(_NL)\
 test.bunt       - test '$(CONTRIB.dir)/bunt.pl' with sample file$(_NL)\
 test.docker     - test docker image$(_NL)\
 help.dev        - print targets for development$(_NL)\
"

ALL.help.test  += $(_NL)$(HELP.misc)

HELP-help.test.misc = print misc. testing targets
HELP-help.dev       = print targets for development

#_____________________________________________________________________________
#________________________________________________________________ variables __|

#TEST.args       =
    # is special in this makefile; do not overwrite TEST.args in other files
_args.misc      = +quit
BENCH.times     = $(EXE.bench).times
BENCH.host      = $(TEST.host)

ALL.test.misc   = test.bench test.bunt test.docker
    # explicit list of targets in this makefile

#_____________________________________________________________________________
#____________________________________________________________ various tests __|

bench: test.bench
test.bench:
	$(EXE.bench) $(BENCH.host)
	@echo "# use '$(MAKE) test.bench.log' to save result in '$(BENCH.times)'"
test.bench.log:
	$(EXE.bench) $(BENCH.host) >> $(BENCH.times)

test.bunt: $(EXE.test.bunt)
	@$(TARGET_VERBOSE)
	-cat $(EXE.test.bunt) | $(CONTRIB.dir)/bunt.pl

# TODO: simple test, needs to be improved and checked
test.docker:
	docker image ls owasp/o-saft
	$(EXE.docker) +VERSION
	$(EXE.docker) +version
	$(EXE.docker) usage

.PHONY: test.bench test.bench.log test.bunt test.docker

#_____________________________________________________________________________
#__________________________________________________ targets for development __|

HELP.dev        = "\
\#               ________________________________ targets for development _$(_NL)\
 tags            - generate tags file for vi(m)$(_NL)\
 profile.sub.entry  - generate function calling tree of '$(DEV.pl)' (entry only)$(_NL)\
 profile.sub.exit   - generate function calling tree of '$(DEV.pl)' (entry and exit)$(_NL)\
 profile.sub.args   - generate function calling tree of '$(DEV.pl)' (in, out and parameter)$(_NL)\
 nytprof.out     - generate profiling data (for nytprofcalls)$(_NL)\
 nytprof.html    - generate profiling data in HTML format$(_NL)\
 dprof.out       - generate profiling data (for dprofpp; times, counts, calling tree)$(_NL)\
 code.quality    - search for various common coding mistakes, see make e-ALL.test.quality\
"

# TODO: if we switch HELP.dev to single lines HELP-*
#help.dev: help.HEAD
#	@$(EXE.help) $(_MYSELF.misc)
#	@$(ECHO) "$(_HELP_LINE_)"
help.dev: help.HEAD
	@$(ECHO)  $(HELP.dev)
	@$(ECHO) "$(_HELP_LINE_)"

$(GEN.tags): $(SRC.pl) $(ALL.pm) $(CHK.pl) $(SRC.cgi) $(SRC.tcl) $(ALL.Makefiles)
	ctags $^

ALL.test.dev    = $(GEN.tags)
ALL.test.dev   += profile.sub.entry profile.sub.exit profile.sub.args nytprof.html dprof.out
#ALL.test.dev   += code.quality

# following checks based on http://perldoc.perl.org/perldiag.html
# TODO: all targets fail if checks returns nothing
ALL.qa          = $(ALL.pm) $(SRC.pl)
qa.double_dref:
	@echo "#make: check depricated double dereferencing ..."
	@-egrep -H '\$$$$[^$$)]'    $(ALL.qa)
qa.defined_arr:
	@echo "#make: check depricated defined(@array) ..."
	@-egrep -H 'defined[( ]*@' $(ALL.qa)
qa.defined_hash:
	@echo "#make: check depricated defined(%hash) ..."
	@-egrep -H 'defined[( ]*%' $(ALL.qa)
qa.misspelled_regex:
	@echo "#make: check misspelled grouping in RegEx ..."
	@-egrep -H '\(:\?'         $(ALL.qa)
qa.misspelled_critic:
	@echo "#make: check misspelled use of ## no critic ..."
	@-egrep -H ' # no critic'  $(ALL.qa)
ALL.test.quality= qa.double_dref qa.defined_arr qa.defined_hash qa.misspelled_regex qa.misspelled_critic
code.quality:     $(ALL.test.quality)

# TODO: Profiling should go to Makefile.profile or alike
# SEE Make:Profiling
# SEE Make:profile.sub
# SEE Make:profile.sub*_%
# SEE Make:profile.sub% target rule

_PROFILE.profile.log= $(TEST.logdir)/profile.sub.log

PROFILE.host        = localhost
profile.sub.entry:      PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1'
profile.sub.entry_%:    PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1'
profile.sub.exit:       PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2'
profile.sub.exit_%:     PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2'
profile.sub.args:       PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15'
profile.sub.args_%:     PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15'

# pattern rules can contain one % only, hence following sequence for _lineinfo is mandatory
profile.sub.%:          _lineinfo   = LineInfo=$(_PROFILE.profile.log)
profile.sub.%.log:      _lineinfo   = LineInfo=$(_PROFILE.profile.log)

profile.sub.entry.log:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1  $(_lineinfo)'
profile.sub.exit.log:   PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2  $(_lineinfo)'
profile.sub.args.log:   PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15 $(_lineinfo)'
profile.sub.entry.log%: PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1  $(_lineinfo)'
profile.sub.exit.log%:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2  $(_lineinfo)'
profile.sub.args.log%:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15 $(_lineinfo)'

profile.sub%:
	@$(eval _args   = $(shell echo "$*" | awk -F_ '{i=1;while(i<NF){i++;print $$i}}'))
	@$(eval my.args = $(shell [ -n "$(_args)" ] && echo $(_args) || echo $(_args.misc) ))
	-env $(PERL.OPTS) perl -dS $(DEV.pl) $(PROFILE.host) $(my.args) 2>&1 

# TODO: 
#     make profile.sub.entry | sed -e 's/ entering //'
#     make profile.sub.exit  | sed -e 's/ entering /+/' -e 's/exited / -/'
#     make profile.sub.args  | sed -e 's/ in  /+/' -e 's/out / -/' -e 's/ from .*\//\t/'
# better use dprof.out below

_nytprof.log    = $(TEST.logdir)/nytprof.out
nytprof.out: $(_nytprof.log)
	@perl -d:NYTProf $(DEV.pl) $(PROFILE.host) $(_args.misc)
	@mv $@ $<
	@echo "# inspect with: nytprofcalls $(_nytprof.log)"
nytprof.html: $(_nytprof.log)
	@nytprofhtml --file $<
	@echo "# inspect with: firefox $(TEST.dir)/nytprof/index.html"
nytprof: nytprof.html

_dprof.log      = $(TEST.logdir)/dprof.out
$(_dprof.log):
	@env PERL_DPROF_OUT_FILE_NAME=$(_dprof.log) perl -d:DProf $(DEV.pl) $(PROFILE.host) $(_args.misc)
	@dprofpp    $(_dprof.log)
	@echo ""
	@echo "# show calling tree: dprofpp -t $(_dprof.log)"
#dprof.out: PERL_DPROF_OUT_FILE_NAME=$(_dprof.log)
dprof.out: $(_dprof.log)
# useful options: -T -I
# dprofpp -t -f "(Carp::)|(Exporter::)|(Symbol::)|(DynaLoader::)"
.PHONY: $(_dprof.log)

# TODO: define summary macro for all profile targets
ALL.test.profile= profile.sub.entry profile.sub.exit profile.sub.args \
	nytprof.out nytprof.html dprof.out \
	code.quality

#_____________________________________________________________________________
#_____________________________________________________________________ test __|

# feed main Makefile
ALL.tests      += $(ALL.test.misc)
ALL.tests.log  += test.bench.log


#! /usr/bin/make -rRf
#?
#? NAME
#?      Makefile    - makefile for various O-Saft tests
#?
#? SYNOPSYS
#?      make [options] [target] [...]
#?
#? DESCRIPTION
#?      Makefile containing general testing targets for O-Saft project.
#?
#? LIMITATIONS
#?      Requires GNU Make > 2.0.
#?
# HACKER's INFO
#       For details please see ../Makefile .
#
#       Naming conventions for targets see ../Makefile.help .
#
#? VERSION
#?      @(#) Makefile.misc 1.9 18/12/07 23:58:17
#?
#? AUTHOR
#?      18-apr-18 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

_SID.misc       = 1.9

_MYSELF.misc    = t/Makefile.misc
ALL.includes   += $(_MYSELF.misc)
ALL.inc.type   += misc

MAKEFLAGS      += --no-builtin-variables --no-builtin-rules --no-print-directory
.SUFFIXES:

first-misc-target-is-default: help.test.misc

ifeq (,$(_SID.test))
    -include t/Makefile
endif

HELP.misc       = "\
\#               ____________________________________________ misc. tests _$(_NL)\
 test.bench      - call '$(EXE.bench)' for some benchmarks$(_NL)\
 test.bench.log  - call '$(EXE.bench)' and save result in '$(BENCH.times)'$(_NL)\
 test.bunt       - test '$(CONTRIB.dir)/bunt.pl' with sample file$(_NL)\
 test.docker     - test docker image$(_NL)\
 help.dev        - print targets for development$(_NL)\
"

ALL.help.test  += $(_NL)$(HELP.misc)

HELP-help.test.misc = print misc. testing targets
HELP-help.dev       = print targets for development

#_____________________________________________________________________________
#________________________________________________________________ variables __|

TEST.args         = +quit
BENCH.times       = $(EXE.bench).times
BENCH.host        = $(TEST.host)

ALL.test.misc     = test.bench test.bunt test.docker

#_____________________________________________________________________________
#____________________________________________________________ various tests __|

bench: test.bench
test.bench:
	$(EXE.bench) $(BENCH.host)
	@echo "# use '$(MAKE) test.bench.log' to save result in '$(BENCH.times)'"
test.bench.log:
	$(EXE.bench) $(BENCH.host) >> $(BENCH.times)

test.bunt: $(EXE.test.bunt)
	@$(TARGET_VERBOSE)
	-cat $(EXE.test.bunt) | $(CONTRIB.dir)/bunt.pl

# TODO: simple test, needs to be improved and checked
test.docker:
	docker image ls owasp/o-saft
	$(EXE.docker) +VERSION
	$(EXE.docker) +version
	$(EXE.docker) usage

.PHONY: test.bench test.bench.log test.bunt test.docker

#_____________________________________________________________________________
#__________________________________________________ targets for development __|

# following will be shown with "main" Makefile or target help.dev
HELP-_dev       = __________________________________ targets for development _
HELP-tags       = generate tags file for vi(m)
HELP-profile.sub.entry  = generate function calling tree of '$(DEV.pl)' (entry only)
HELP-profile.sub.exit   = generate function calling tree of '$(DEV.pl)' (entry and exit)
HELP-profile.sub.args   = generate function calling tree of '$(DEV.pl)' (in, out and parameter)

help.dev: help.HEAD
	@$(EXE.help) $(_MYSELF.misc)

$(GEN.tags): $(SRC.pl) $(ALL.pm) $(CHK.pl) $(SRC.cgi) $(SRC.tcl) $(ALL.Makefiles)
	ctags $^

ALL.test.dev    = $(GEN.tags)
ALL.test.dev   += profile.sub.entry

# TODO: Profiling should go to Makefile.profile or alike
# SEE Make:Profiling
# SEE Make:profile.sub
# SEE Make:profile.sub*_%
# SEE Make:profile.sub% target rule

_DEBUG.profile.log  = $(TEST.logdir)/profile.sub.log

DEBUG.host          = localhost
profile.sub.entry:      PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1'
profile.sub.entry_%:    PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1'
profile.sub.exit:       PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2'
profile.sub.exit_%:     PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2'
profile.sub.args:       PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15'
profile.sub.args_%:     PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15'

# pattern rules can contain one % only, hence following sequence for _lineinfo is mandatory
profile.sub.%:          _lineinfo   = LineInfo=$(_DEBUG.profile.log)
profile.sub.%.log:      _lineinfo   = LineInfo=$(_DEBUG.profile.log)

profile.sub.entry.log:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1  $(_lineinfo)'
profile.sub.exit.log:   PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2  $(_lineinfo)'
profile.sub.args.log:   PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15 $(_lineinfo)'
profile.sub.entry.log%: PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1  $(_lineinfo)'
profile.sub.exit.log%:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2  $(_lineinfo)'
profile.sub.args.log%:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15 $(_lineinfo)'

profile.sub%:
	@$(eval _args = $(shell echo "$*" | awk -F_ '{i=1;while(i<NF){i++;print $$i}}'))
	@$(eval TEST.args = $(shell [ -n "$(_args)" ] && echo $(_args) || echo $(TEST.args) ))
	-env $(PERL.OPTS) perl -dS $(DEV.pl) $(DEBUG.host) $(TEST.args) 2>&1 
#profile.sub%.log:
#	@ls -l $(_DEBUG.profile.log)
# reformating $(_DEBUG.profile.log)  with: sed -e 's/^\s*out /  &/'

# TODO: 
#     make profile.sub.entry | sed -e 's/ entering //'
#     make profile.sub.exit  | sed -e 's/ entering /+/' -e 's/exited / -/'
#     make profile.sub.args  | sed -e 's/ in  /+/' -e 's/out / -/' -e 's/ from .*\//\t/'

#_____________________________________________________________________________
#_____________________________________________________________________ test __|

# feed main Makefile
ALL.tests      += $(ALL.test.misc)
ALL.tests.log  += test.bench.log


#! /usr/bin/make -rRf
#?
#? NAME
#?      Makefile        - makefile for various O-Saft tests and development
#?
#? SYNOPSYS
#?      make [options] [target] [...]
#?
#? DESCRIPTION
#?      Makefile containing general testing targets for O-Saft project.
#?
#? LIMITATIONS
#?      Requires GNU Make > 2.0.
#?
# HACKER's INFO
#       For details please see ../Makefile .
#
#       Naming conventions for targets see Makefile.help .
#
#? VERSION
#?      @(#) Makefile.misc 1.30 19/09/10 22:22:29
#?
#? AUTHOR
#?      18-apr-18 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

_SID.misc       = 1.30

_MYSELF.misc    = t/Makefile.misc
ALL.includes   += $(_MYSELF.misc)
ALL.inc.type   += misc

first-misc-target-is-default: help.test.misc

ALL.help.tests += help.test.misc

HELP-help.test.misc = targets for misc. tests and development
help.test.misc:       HELP_TYPE = misc
help.test.misc-v:     HELP_TYPE = misc
help.test.misc-vv:    HELP_TYPE = misc

ifeq (,$(_SID.test))
    -include t/Makefile
endif

#_____________________________________________________________________________
#________________________________________________________________ variables __|

#TEST.args       =
    # is special in this makefile; do not overwrite TEST.args in other files
# internal used tools and files (paths hardcoded!)
EXE.bench       = t/o-saft_bench.sh
EXE.test.bunt   = t/test-bunt.pl.txt
_args.misc      = +quit
BENCH.times     = $(EXE.bench).times
BENCH.host      = $(TEST.host)

OPT.cloc        =
EXE.cloc        = cloc $(OPT.cloc)

ifndef CONTRIB.dir
    CONTRIB.dir = contrib
endif

#_____________________________________________________________________________
#____________________________________________________________ various tests __|

HELP-_misc1         = ____________________________________________ testing misc. _
HELP-test.bench     = call '$(EXE.bench)' for some benchmarks
HELP-test.bench.log = call '$(EXE.bench)' and save result in '$(BENCH.times)'
HELP-test.bunt      = test '$(CONTRIB.dir)/bunt.pl' with sample file
HELP-test.docker    = test docker image

HELP.misc           = $(_NL)\
\# Make may return status code for any  qa.*  target, even the result is not$(_NL)\
\# errorneous. The target  code.quality  is not part of '\$$(ALL.test.misc)'.

HELP.test.misc.all  = # no special documentation yet

bench: test.bench
test.bench:
	@$(TRACE.target)
	$(EXE.bench) $(BENCH.host)
	@echo "# use '$(MAKE_COMMAND) test.bench.log' to save result in '$(BENCH.times)'"
test.bench.log:
	@$(TRACE.target)
	@$(TRACE.target.log)
	$(EXE.bench) $(BENCH.host) >> $(BENCH.times)

test.bunt: $(EXE.test.bunt)
	@$(TRACE.target)
	-cat $(EXE.test.bunt) | $(CONTRIB.dir)/bunt.pl

# TODO: simple test, needs to be improved and checked
test.docker:
	@$(TRACE.target)
	docker image ls owasp/o-saft
	$(EXE.docker) +VERSION
	$(EXE.docker) +version
	$(EXE.docker) usage

ALL.test.misc   = test.bench test.bunt test.docker
    # explicit list of targets in this makefile
test.misc:        $(ALL.test.misc)

.PHONY: test.bench test.bench.log test.bunt test.docker

#_____________________________________________________________________________
#__________________________________________________ targets for development __|

HELP-_cloc      = ________________________________________ statistic targets _
HELP-cloc       = count lines of code of all source files; summary output
HELP-cloc.file  = count lines of code of all source files; output by file
HELP-cloc.lang  = same as cloc.file and cloc
# NOTE: also possible usage:
#       make cloc OPT.cloc=--3
#       make cloc OPT.cloc=--csv
#       make cloc OPT.cloc=--xml
# NOTE: --quiet suppresses count of files also, hence not used by default
cloc%:
	@$(TRACE.target)
	@$(EXE.cloc) $(sort $(ALL.src))

cloc.stat:  OPT.cloc    +=
cloc.file:  OPT.cloc    += --by-file
cloc.lang:  OPT.cloc    += --by-file-by-lang
cloc:       cloc.stat

.PHONY: cloc

HELP-_dev1          = __________________________________ targets for development _
HELP-tags           = generate tags file for vi(m)
HELP-profile.sub.entry  = generate function calling tree of '$(DEV.pl)' (entry only)
HELP-profile.sub.exit   = generate function calling tree of '$(DEV.pl)' (entry and exit)
HELP-profile.sub.args   = generate function calling tree of '$(DEV.pl)' (in, out and parameter)
HELP-nytprof.out    = generate profiling data (for nytprofcalls)
HELP-nytprof.html   = generate profiling data in HTML format
HELP-dprof.out      = generate profiling data (for dprofpp; times, counts, calling tree)

$(GEN.tags): $(SRC.pl) $(ALL.pm) $(CHK.pl) $(SRC.cgi) $(SRC.tcl) $(ALL.Makefiles)
	ctags $^

ALL.test.misc  += $(GEN.tags)
ALL.test.misc  += profile.sub.entry profile.sub.exit profile.sub.args nytprof.html dprof.out

# TODO: Profiling should go to Makefile.profile or alike
# SEE Make:Profiling
# SEE Make:profile.sub
# SEE Make:profile.sub*_%
# SEE Make:profile.sub% target rule

_PROFILE.profile.log= $(TEST.logdir)/profile.sub.log

PROFILE.host        = localhost
profile.sub.entry:      PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1'
profile.sub.entry_%:    PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1'
profile.sub.exit:       PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2'
profile.sub.exit_%:     PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2'
profile.sub.args:       PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15'
profile.sub.args_%:     PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15'

# pattern rules can contain one % only, hence following sequence for _lineinfo is mandatory
profile.sub.%:          _lineinfo   = LineInfo=$(_PROFILE.profile.log)
profile.sub.%.log:      _lineinfo   = LineInfo=$(_PROFILE.profile.log)

profile.sub.entry.log:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1  $(_lineinfo)'
profile.sub.exit.log:   PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2  $(_lineinfo)'
profile.sub.args.log:   PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15 $(_lineinfo)'
profile.sub.entry.log%: PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1  $(_lineinfo)'
profile.sub.exit.log%:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2  $(_lineinfo)'
profile.sub.args.log%:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15 $(_lineinfo)'

profile.sub%:
	@$(TRACE.target)
	@$(eval _args   = $(shell echo "$*" | awk -F_ '{i=1;while(i<NF){i++;print $$i}}'))
	@$(eval my.args = $(shell [ -n "$(_args)" ] && echo $(_args) || echo $(_args.misc) ))
	-env $(PERL.OPTS) perl -dS $(DEV.pl) $(PROFILE.host) $(my.args) 2>&1 

# TODO: 
#     make profile.sub.entry | sed -e 's/ entering //'
#     make profile.sub.exit  | sed -e 's/ entering /+/' -e 's/exited / -/'
#     make profile.sub.args  | sed -e 's/ in  /+/' -e 's/out / -/' -e 's/ from .*\//\t/'
# better use dprof.out below

_nytprof.log    = $(TEST.logdir)/nytprof.out
nytprof.out: $(_nytprof.log)
	@$(TRACE.target)
	@perl -d:NYTProf $(DEV.pl) $(PROFILE.host) $(_args.misc)
	@mv $@ $<
	@echo "# inspect with: nytprofcalls $(_nytprof.log)"
nytprof.html: $(_nytprof.log)
	@$(TRACE.target)
	@nytprofhtml --file $<
	@echo "# inspect with: firefox $(TEST.dir)/nytprof/index.html"
nytprof: nytprof.html

_dprof.log      = $(TEST.logdir)/dprof.out
$(_dprof.log):
	@$(TRACE.target)
	@env PERL_DPROF_OUT_FILE_NAME=$(_dprof.log) perl -d:DProf $(DEV.pl) $(PROFILE.host) $(_args.misc)
	@dprofpp    $(_dprof.log)
	@echo ""
	@echo "# show calling tree: dprofpp -t $(_dprof.log)"
#dprof.out: PERL_DPROF_OUT_FILE_NAME=$(_dprof.log)
dprof.out: $(_dprof.log)
# useful options: -T -I
# dprofpp -t -f "(Carp::)|(Exporter::)|(Symbol::)|(DynaLoader::)"
.PHONY: $(_dprof.log)

# TODO: define summary macro for all profile targets
ALL.test.profile= profile.sub.entry profile.sub.exit profile.sub.args \
	nytprof.out nytprof.html dprof.out \
	code.quality

test.misc.all:    test.misc $(ALL.test.profile)

HELP-code.quality   = search for various common coding mistakes, see make e-ALL.test.quality
# following checks based on http://perldoc.perl.org/perldiag.html
# TODO: all targets fail if checks returns nothing
ALL.qa          = $(ALL.pm) $(SRC.pl)
qa.double_dref:
	@echo "#make: check depricated double dereferencing ..."
	@-egrep -H '\$$$$[^$$)]'    $(ALL.qa)
qa.defined_arr:
	@echo "#make: check depricated defined(@array) ..."
	@-egrep -H 'defined[( ]*@' $(ALL.qa)
qa.defined_hash:
	@echo "#make: check depricated defined(%hash) ..."
	@-egrep -H 'defined[( ]*%' $(ALL.qa)
qa.defined_warnings:
	@echo "#make: check duplicate error and warning numbers ..."
	@$(MAKE_COMMAND) warnings.info | sort -k 2 \
	| awk '{nr=$$2;sub(/:/,"",nr);if(nr==last){print warn;print;}last=nr;warn=$$0}'

qa.misspelled_regex:
	@echo "#make: check misspelled grouping in RegEx ..."
	@-egrep -H '\(:\?'         $(ALL.qa)
qa.misspelled_critic:
	@echo "#make: check misspelled use of ## no critic ..."
	@-egrep -H ' # no critic'  $(ALL.qa)

# some simple checks for Makefiles
qa.makefile_HELP:
	@echo "#make: check HELP- macro definitions in Makefiles ..."
	@-awk '/^HELP-/{print $$1"\t"FILENAME}' $(ALL.Makefiles) | sort
	@echo ""
	@echo "#make: check duplicate HELP- macro definitions in Makefiles ..."
	@-awk '/^HELP-/{print $$1}' $(ALL.Makefiles) | sort | uniq -d 
qa.makefile_help:
	@echo "#make: check help target definitions in Makefiles ..."
	@-awk '/^help/{print $$1"\t"FILENAME}' $(ALL.Makefiles) | sort
	@echo ""
	@echo "#make: check duplicate help target definitions in Makefiles ..."
	@-awk '($$3=="="){next}/^help/{print $$1}' $(ALL.Makefiles) | sort | uniq -d 
#       # duplicate checks for targets need to avoid collecting the conditional
#       # targets which just define macros, hence $3=="=" 
ALL.test.quality    = \
		qa.double_dref \
		qa.defined_arr \
		qa.defined_hash \
		qa.defined_warnings \
		qa.misspelled_regex \
		qa.misspelled_critic \
		qa.makefile_HELP \
		qa.makefile_help
code.quality:     $(ALL.test.quality)

#ALL.test.misc  += $(ALL.test.quality)

#_____________________________________________________________________________
#_____________________________________________________________________ test __|

# feed main Makefile
ALL.tests      += $(ALL.test.misc)
ALL.tests.log  += test.bench.log


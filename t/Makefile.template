#! /usr/bin/make -rRf
#?
#? NAME
#?      Makefile        - template makefile for testing ...
#?
#? SYNOPSYS
#?      To be used as template for new targets in Makefile.SUFFIX.
#?      This file itself is not used (included) in t/Makefile.
#?
#? DESCRIPTION
#?      Template Makefile containing targets for testing SOMETHING.
#?
#? LIMITATIONS
#?      Requires GNU Make > 2.0.
#?
# HACKER's INFO
#       For details please see
#           ../Makefile  ../Makefile.help
#
#? VERSION
#?      @(#) Makefile.template 1.7 19/01/11 23:00:09
#?
#? AUTHOR
#?      18-may-18 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

_SID.TEMPL      = 1.7

_MYSELF.TEMPL   = t/Makefile.template
                # must be hardcoded because  $(firstword $(MAKEFILE_LIST))
                # gets the file of the initial call "make" command
ALL.includes   += $(_MYSELF.TEMPL)
                # add ourself to list of all included makefiles
ALL.inc.type   += TEMPL
                # add our type to list of all included types

first-TEMPL-target-is-default: help.test.TEMPL
    # otherwise the first target from other included files would be used

ifeq (,$(_SID.test))
    -include t/Makefile
    # get general macros for testing from master makefile
endif

#_____________________________________________________________________________
#________________________________________________________________ variables __|

TEST.TEMPL.hosts    = host.to.be.tested
                    # define our list of TEST.hosts

ifdef TEST.hosts
    TEST.TEMPL.hosts= $(TEST.hosts)
                    # list of TEST.hosts can be passed with environment or on command line
endif

TEST.init           = --header
                    # initial  arguments for EXE.pl
TEST.args           = $(TEST.init)
                    # specific arguments will be added in targets below

#_____________________________________________________________________________
#___________________________________________________________ default target __|

HELP-help.test.TEMPL= print targets for testing SOMETHING
                    # defines message for main Makefile's help* targets

# private help target for this makefile
help.test.TEMPL:
	@echo " $(_HELP_LINE_)$(_NL) $(_HELP_INFO_)$(_NL) $(_HELP_LINE_)$(_NL)"
	@echo $(MORE-TEMPL)    ; # no quotes!

#_____________________________________________________________________________
#_____________________________________________________ internal test target __|
# just an internal info target
test.TEMPL.internal:
	@echo "# TEST.file:         $(TEST.file)"
	@echo "# TEST.TEMPL.hosts:  $(TEST.TEMPL.hosts)"
	@echo "# ALL.testTEMPL:     $(words $(ALL.testTEMPL))  : $(ALL.testTEMPL)"
	@echo "# ALL.test.TEMPL:    $(words $(ALL.test.TEMPL)) : $(ALL.test.TEMPL)"
	@echo "# testcmd-TEMPL%:    TEST.init = +quit"
	@echo "# -------------------------------------------------------------"

.PHONY: help.test.TEMPL test.TEMPL.internal

#_____________________________________________________________________________
#______________________________________________________________ testing ... __|

# Description for private help text.
# Note that we use quotes here,  even if not really necessary (but makes syntax
# highlighting in some editors more happy ;-)
MORE-TEMPL      = " \
\#               ______________________________________________ testing ... _$(_NL)\
 test.TEMPL      - test functionality of SOMETHING$(_NL)\
 test.TEMPL.log  - same as test.TEMPL but store output in $(TEST.logdir)/$(_NL)\
\#$(_NL)\
\# Examples:$(_NL)\
\#    make e-ALL.testTEMPL$(_NL)\
\#    make s-ALL.test.TEMPL$(_NL)\
"

# There are two variants of defining unique targets in this Makefile.  Only one
# of them must be used: all from "Variant-1" or all from "Variant-2" !

## Variant-1 {
# initialize variables for our targets
testcmd-TEMPL%:     EXE.pl      = ../program-for.TEMPL
                    # program to perform the tests
testcmd-TEMPL%:     TEST.init   = +quit
                    # argument to be passed always to  $(EXE.pl)

# Set varables for each unique target.
# Note that the % in the pattern rule will be used for the hostname later.
testcmd-TEMPL001_%: TEST.args  += +VERSION
testcmd-TEMPL002_%: TEST.args  += --help

ALL.testTEMPL   = $(shell awk -F% '/^testcmd-TEMPL..._/ {print $$1}' $(_MYSELF.TEMPL))
                # dynamically generate list of all  testcmd_TEMPLDDD  targets

## Variant-1 }


## Variant-2 {
testTEMPL-%:        EXE.pl      = ../program-for.TEMPL
testTEMPL-%:        TEST.init   = +quit

testTEMPL-001_%:    TEST.args  += +VERSION
testTEMPL-002_%:    TEST.args  += --help

ALL.testTEMPL   = $(shell awk -F% '/^testTEMPL-..._/ {print $$1}' $(_MYSELF.TEMPL))

# pattern rule to map to testcmd-%
testTEMPL-%:  testcmd-%
	@echo -n ""

## Variant-2 }

ALL.test.TEMPL  = $(foreach host,$(TEST.TEMPL.hosts),$(ALL.testTEMPL:%=%$(host)))
ALL.test.TEMPL.log= $(ALL.test.TEMPL:%=%.log)
                # generate list of all targets

#_____________________________________________________________________________
#______________________________________________________ targets for testing __|

test.TEMPL:     $(ALL.test.TEMPL)
test.TEMPL.log: $(ALL.test.TEMPL.log)

# more verbose target: test.TEMPL-v and test.TEMPL-vv
test.TEMPL-%:   test.TEMPL.internal test.TEMPL
	@echo -n ""

#_____________________________________________________________________________
#_____________________________________________________________________ test __|

# feed main Makefile
ALL.tests      += $(All.test.TEMPL)
ALL.tests.log  += $(ALL.test.TEMPL.log)


#! /usr/bin/make -rRf
#?
#? NAME
#?      Makefile        - makefile for testing O-Saft commands and options
#?
#? SYNOPSYS
#?      make [options] [target] [...]
#?
#? DESCRIPTION
#?      Makefile to perform testing tasks for O-Saft project.
#?
#? LIMITATIONS
#?      Requires GNU Make > 2.0.
#?
# HACKER's INFO
#       For details please see ../Makefile .
#
#       Naming conventions for targets see ../Makefile.help .
#
#? VERSION
#?      @(#) Makefile.cmds 1.4 18/06/11 15:39:50
#?
#? AUTHOR
#?      18-apr-18 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

_SID.cmds   = 1.4

MAKEFLAGS  += --no-builtin-variables --no-builtin-rules --no-print-directory
.SUFFIXES:

first-cmds-target-is-default: help.test.cmds
    # otherwise the first target from included files would be used

ifeq (,$(_SID.test))
    -include test/Makefile
endif

ALL.Makefiles  += test/Makefile.cmds

#_____________________________________________________________________________
#___________________________________________________________ default target __|

HELP-help.test.cmds = print targets for testing $(SRC.pl) commands and options
help.test.cmds:
	@echo " $(_HELP_LINE_)$(_NL) $(_HELP_INFO_)$(_NL) $(_HELP_LINE_)$(_NL)"
	@echo $(MORE-cmds)    ; # no quotes!

help.test.cmds.all:
	@echo "# individual targets for tests"
	@$(MAKE) -s echo=ALL.test.cmds     echo
	@echo ""
	@$(MAKE) -s echo=ALL.test.cmds.log echo
	@echo ""

.PHONY: help.test.cmds help.test.cmds.all

#_____________________________________________________________________________
#________________________________________________________________ variables __|

TEST.cmds.hosts     = localhost
ifdef TEST.hosts
    TEST.cmds.hosts = $(TEST.hosts)
endif

# initial arguments for EXE.pl; will be completed in targets below
TEST.args       = $(TEST.init)

#_____________________________________________________________________________
#_____________________________________________________ internal test target __|
# just an internal info target
test.cmds.internal:
	@echo "# TEST.file:       $(TEST.file)"
	@echo "# TEST.cmds.hosts: $(TEST.cmds.hosts)"
	@echo "# ALL.testinfo:    $(words $(ALL.testinfo))  : $(ALL.testinfo)"
	@echo "# ALL.test.info:   $(words $(ALL.test.info)) : $(ALL.test.info)"
	@echo "# ALL.test.cmds:   $(words $(ALL.test.cmds)) : $(ALL.test.cmds)"

#_____________________________________________________________________________
#______________________________________________________ testing +cmd --opt  __|

MORE-cmds       = " \
\#               ________________________________________ summary targets _$(_NL)\
 help.test.cmds.all - print available individual targets for testing commands$(_NL)\
 test.help       - test  help   commands and options$(_NL)\
 test.info       - test  info   commands with $(TEST.cmds.hosts)$(_NL)\
 test.check      - test  check  commands with $(TEST.cmds.hosts)$(_NL)\
 test.cipher     - test  cipher commands with $(TEST.cmds.hosts)$(_NL)\
 test.summary    - test summary commands with $(TEST.cmds.hosts)$(_NL)\
 test.local      - test commands with $(TEST.cmds.hosts)$(_NL)\
 test.*.log      - same as test.* but store output in test/testcmd-CMD.log$(_NL)\
 test.cmds.all   - test all commands with $(TEST.cmds.hosts)$(_NL)\
 test.cmds.log   - same as test.cmds.all but store output in test/testcmd-CMD.log$(_NL)\
\#               ________________________________________ special targets _$(_NL)\
 testrun-CMD     - test specific command CMD with $(TEST.cmds.hosts)$(_NL)\
 testrun-CMD.log - same as testrun-CMD but store output in test/testcmd-CMD.log$(_NL)\
\#$(_NL)\
\# Examples: $(_NL)\
\#    make s-ALL.test.cmds $(_NL)\
\#    make testrun-+cn $(_NL)\
\# All following examples are the same: $(_NL)\
\#    make testrun-+info $(_NL)\
\#    make testcmd-egal_localhost TEST.args='+info --header' $(_NL)\
\#    make test.info TEST.args='+info --header' ALL.testinfo=testcmd-egal_ $(_NL)\
\#    make testcmd-001_localhost $(_NL)\
\# All following examples are the same: $(_NL)\
\#    make testrun-+cipher TEST.init='--header --enabled' $(_NL)\
\#    make test-+cipher TEST.init='--header --enabled localhost' $(_NL)\
\#    make test-+cipher TEST.args='--header --enabled localhost' $(_NL)\
\#$(_NL)\
\# Some of the examples above use  localhost  as hostname by default.$(_NL)\
"

# TODO: implement following
#     make test-+help-+VERSION
#     make test-+help-+VERSION TEST.init=--norc
#     make testrun-+cn\ --traceCMD
#     make testrun-'+cn --traceCMD'
#     make testrun-'+cipher --enabled'

# please see test/Makefile for details of following rules and macros
# note that the  DDD  part of the target name must be unique over all Makefiles
# for better readability, "speaking names" are used for DDD here

testcmd-+help-+VERSION_%:       TEST.args  += +VERSION
testcmd-+help-+help_%:          TEST.args  += +help=command
testcmd-+help-+ciphers_%:       TEST.args  += +ciphers -V
testcmd-+help-+version_%:       TEST.args  += +version
testcmd-+help-+version--v_%:    TEST.args  += +version --v --usr
testcmd-+help---v+vers_%:       TEST.args  += --v +version
testcmd-+help---v+help_%:       TEST.args  += --v +help
testcmd--help-command_%:        TEST.args  += --help=command
testcmd--help-options_%:        TEST.args  += --help=options
testcmd--help-cmd_%:            TEST.args  += --help=cmd
testcmd--help-opt_%:            TEST.args  += --help=opt
testcmd--help-alias_%:          TEST.args  += --help=alias
testcmd--help-glossar_%:        TEST.args  += --help=glossar
testcmd--help-rfc_%:            TEST.args  += --help=rfc
testcmd--help-links_%:          TEST.args  += --help=links
testcmd--help-check_%:          TEST.args  += --help=check
testcmd--help-regex_%:          TEST.args  += --help=regex
testcmd--help-WHY_%:            TEST.args  += --help=WHY
testcmd--help-CHECK_%:          TEST.args  += --help=CHECK
testcmd--help-cfg-text_%:       TEST.args  += --help=cfg-text
testcmd--help-gen-wiki_%:       TEST.args  += --help=gen-wiki
testcmd--help-gen-html_%:       TEST.args  += --help=gen-html
testcmd--help-gen-cgi_%:        TEST.args  += --help=gen-cgi
testcmd--help--yeast-data_%:    TEST.args  += --yeast-data
testcmd--help--yeast-prot_%:    TEST.args  += --yeast-prot
testcmd-+info_%:                TEST.args  += +info
testcmd-+info--trace-cmd_%:     TEST.args  += +info   --trace-cmd
testcmd-+info--trace-key_%:     TEST.args  += +info   --trace-key
testcmd-+info--trace-key-norc_%:    TEST.args  += +info   --trace-key --norc
testcmd-+check_%:               TEST.args  += +check
testcmd-+check--trace-key_%:    TEST.args  += +check  --trace-key
testcmd-+check--trace-key-norc_%:   TEST.args  += +check  --trace-key --norc
testcmd-+check--trace-norc_%:   TEST.args  += +check  --trace-cmd --trace-time --trace=2 --norc
testcmd-+check--nossltls_%:     TEST.args  += +check  --nosslv2 --nosslv3 --notlsv1 --notlsv11 --notlsv12 --notlsv13
testcmd-+cipher_%:              TEST.args  += +cipher
testcmd-+cipher--force-openssl_%:   TEST.args  += +cipher --force-openssl
testcmd-+cipher--cipher-openssl_%:  TEST.args  += +cipher --cipher-openssl
testcmd-+cipherall_%:           TEST.args  += +cipherall
testcmd-+cipherraw_%:           TEST.args  += +cipherraw
testcmd-+cipher-dh_%:           TEST.args  += +cipher-dh
testcmd-+cipher-default_%:      TEST.args  += +cipher-default
testcmd-+ciphercheck_%:         TEST.args  += +ciphercheck
testcmd-+cipher--nossltls_%:    TEST.args  += +cipher --nosslv2 --nosslv3 --notlsv1 --notlsv11 --notlsv12 --notlsv13
testcmd-_vuln-+BEAST_%:         TEST.args  += +BEAST
testcmd-_vuln-+CRIME_%:         TEST.args  += +CRIME
testcmd-_vuln-+DROWN_%:         TEST.args  += +DROWN
testcmd-_vuln-+FREAK_%:         TEST.args  += +FREAK
testcmd-_vuln-+POODLE_%:        TEST.args  += +POODLE
testcmd-_vuln-+logjam_%:        TEST.args  += +logjam
testcmd-_vuln-+lucky13_%:       TEST.args  += +lucky13
testcmd-_vuln-+Sloth_%:         TEST.args  += +Sloth
testcmd-_vuln-+Sweet32_%:       TEST.args  += +Sweet32
testcmd-_summ-+bsi_%:           TEST.args  += +bsi
testcmd-_summ-+TR-02102+_%:     TEST.args  += +TR-02102+
testcmd-_summ-+EV_%:            TEST.args  += +EV
testcmd-_summ-+quick_%:         TEST.args  += +quick --trace-arg
testcmd-_summ-+http_%:          TEST.args  += +http
testcmd-_summ-+hsts_%:          TEST.args  += +hsts
testcmd-_summ-+ocsp_%:          TEST.args  += +ocsp
testcmd-_summ-+preload_%:       TEST.args  += +preload
testcmd-_summ-+protocols_%:     TEST.args  += +protocols
testcmd-_summ-+fingerprints_%:  TEST.args  += +fingerprints
testcmd-_summ-+sizes_%:         TEST.args  += +sizes
testcmd-_summ-+pfs_%:           TEST.args  += +pfs
testcmd-_summ-+sts_%:           TEST.args  += +sts
testcmd-_summ-+sni_%:           TEST.args  += +sni
testcmd-_summ-+vulns_%:         TEST.args  += +vulns

# dynamically generate list of all  testcmd_DDD  targets
# note that . inside // below is a meta character
# note: no sort because we want the sequence as defined above
ALL.testhelp    = $(shell awk -F% '/^testcmd-.help/   {print $$1}' test/Makefile.cmds)
ALL.testinfo    = $(shell awk -F% '/^testcmd-.info/   {print $$1}' test/Makefile.cmds)
ALL.testcheck   = $(shell awk -F% '/^testcmd-.check/  {print $$1}' test/Makefile.cmds)
ALL.testcipher  = $(shell awk -F% '/^testcmd-.cipher/ {print $$1}' test/Makefile.cmds)
ALL.testsummary = $(shell awk -F% '/^testcmd-.summ/   {print $$1}' test/Makefile.cmds)
ALL.testlocal   = $(shell awk -F% '/^testcmd-.local/  {print $$1}' test/Makefile.cmds)

# dynamically generate list of all  testcmd_DDD  for all hostnames
ALL.test.help   = $(foreach host,$(TEST.cmds.hosts),$(ALL.testhelp:%=%$(host)))
ALL.test.info   = $(foreach host,$(TEST.cmds.hosts),$(ALL.testinfo:%=%$(host)))
ALL.test.check  = $(foreach host,$(TEST.cmds.hosts),$(ALL.testcheck:%=%$(host)))
ALL.test.cipher = $(foreach host,$(TEST.cmds.hosts),$(ALL.testcipher:%=%$(host)))
ALL.test.summary= $(foreach host,$(TEST.cmds.hosts),$(ALL.testsummary:%=%$(host)))
ALL.test.local  = $(foreach host,$(TEST.cmds.hosts),$(ALL.testlocal:%=%$(host)))

ALL.test.cmds   = \
		  $(ALL.test.help) \
		  $(ALL.test.info) \
		  $(ALL.test.check) \
		  $(ALL.test.cipher) \
		  $(ALL.test.summary) \
		  $(ALL.test.local)
ALL.test.cmds.log   = $(ALL.test.cmds:%=%.log)

#_____________________________________________________________________________
#______________________________________________________ targets for testing __|

# testrun target to allow something like:  testrun-+my-fancy-command
# note that we use  testrun-+%  and not  testrun+%  to avoid double definition
# of the pattern rule (problem in GNUmake)
# unfortunatelly this restrict the usage to to pattern starting with +
testrun-+%: TEST.args += $(TEST.cmds.hosts)
testrun-%: testcmd-%
	@echo -n ""

# TODO: use target _no-hosts
# for debugging add test.cmds.internal to the target's dependencies
test.help:          $(ALL.test.help)
test.info:          $(ALL.test.info)
test.check:         $(ALL.test.check)
test.cipher:        $(ALL.test.cipher)
test.summary:       $(ALL.test.summary)
test.local:         $(ALL.test.local)

test.help.log:      $(ALL.test.info:%=%.log)
test.info.log:      $(ALL.test.info:%=%.log)
test.check.log:     $(ALL.test.info:%=%.log)
test.cipher.log:    $(ALL.test.info:%=%.log)
test.summary.log:   $(ALL.test.info:%=%.log)
test.local.log:     $(ALL.test.info:%=%.log)

test.cmds.all:      $(ALL.test.cmds)
test.cmds.log:      $(ALL.test.cmds.log)

#_____________________________________________________________________________
#_____________________________________________________________________ test __|

# feed main Makefile
ALL.tests      += $(ALL.test.cmds)
ALL.tests.log  += test.cmds.log


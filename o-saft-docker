#!/bin/sh
#?
#? NAME
#?       $0 - wrapper script to call O-Saft in a Docker image
#?
#? SYNOPSIS
#?       $0
#?       $0 build
#?       $0 usage
#?       $0 shell
#?       $0 status
#?       $0 [options and commands of o-saft.pl]
#?
#? OPTIONS
#?       -help   got it
#?       -n      do not execute, just show what would be done
#?       -v      be a bit verbose
#?       --      pass all remaining parameters to o-saft.pl in Docker image
#?
#? DESCRIPTION
#?       This is a multipurpose wrapper for running O-Saft in a Docker image.
#?       It can operate in following modes:
#?           build   - build the complete Docker image for O-Saft
#?           usage   - print the initial usage message for O-Saft in Docker
#?           shell   - run a shell (/bin/sh) in Docker image
#?           root    - run a shell (/bin/sh) as user root in Docker image
#?           status  - show various information about O-Saft Docker image
#?           hacker  - show information about the used Dockerfile
#?           *       - anything else (default): run o-saft.pl in Docker image
#?
#?       The main purpose of this wrapper is to provide a very simple call of
#?       o-saft.pl  in a running Docker image. This is the default mode.
#?
#? TERMINOLOGY
#?
#?   Docker vs. docker
#?       We use the term "Docker" when the Docker system in general is meant.
#?       The term "docker" is used when the Docker client program is meant.
#?
#?   mode vs. command
#?       We use the term "mode" for our script,  which is similar to the term
#?       "command" for Docker. This is to distingush our commands (mode) from
#?       those of Docker.
#?
#? MODES
#?       Modes are simply an alias  to call  docker  with the proper commands
#?       and options for the  O-Saft  image. Most modes (exception: build and
#?       status) use the command:     "docker run ...".
#?       This wrapper ensures that the proper O-Saft image within Docker will
#?       be used by passing the proper  "repository:tag"  image id.
#?
#?       The modes are:
#?
#?   default
#?       In default mode,  all parameters given to this wrapper are passed to
#?       o-saft.pl  in the Docker image. This means that for all the existing
#?       calls, the name of the script (usually o-saft.pl) needs simply to be
#?       replaced by  $0 . Example:
#?           o-saft.pl +info your.tld
#?       becomes
#?           $0 +info your.tld
#?       Please see  LIMITATIONS  below also.
#?
#?   build
#?       This mode builds the Docker image for O-Saft from the Dockerfile.
#?
#?   usage
#?       Print a brief purpose and usage of this script.
#?       It is intended to be called from within the Docker image once, right
#?       after the initial build (see Dockerfile).
#?
#?   shell
#?       Start a shell in O-Saft Docker image.
#?       This is useful because the  ENTRYPOINT  in the image is  o-saft.pl
#?       which otherwise will always be executed.
#?
#?   root
#?       Same as mode  shell  , but login as user root.
#?
#?   status
#?       Show various information about O-Saft Docker image.
#?
#? SECURITY
#?       When working with Docker images, at least two types of security have
#?       to be observed.
#?
#?       WARNING:  it is highly recommended to *not* use the created image as
#?                 base for other Docker images, or even run openssl from the
#?                 image for other purpose than O-Saft intends.
#?
#?       It is rather difficult to create a secure Docker image, at least the
#?       pulled files (Dockerfile, image, other sources) must be trusted.
#?
#?       That's why this script provides different modes to create an image.
#?       The purpose is to make the build process as transparent as possible.
#?       please refer to the "build" modes described below.
#?
#?       The known security types are:
#?
#?   Security of the created images
#?       When creating Docker images, wether using  build, load or pull,  you
#?       must trust the sources: the binary (load or pull) or the  Dockerfile
#?       (which may be fetched at runtime too) used to build the image.
#?
#?   Security of the tools executed from within the image (docker run)
#?       If the image is trustworthy (see before),  the tools executed in the
#?       image may have security impacts. 
#?       This script creates a Docker image for O-Saft. O-Saft is supposed to
#?       checks a target for SSL/TLS related issues.  I. g. it doesn not harm
#?       the target using  penetration or attacking techniques  (except check
#?       for Heartbleed vulnerability). So o-saft.pl itself should not be any
#?       security issue.  However, to perfom the checks, O-Saft recommends to
#?       install a special version of openSSL. This OpenSSL has functionality
#?       enabled, which is known to be insecure (i. e. SSLv2, SSLv3).
#?
#?       
#? HACKER's INFO
#?       Options for this script are with a single - (dash) only, because the
#?       same options with double  --  exist for  o-saft.pl. See  LIMITATIONS
#?       below also.
#?
#? LIMITATIONS
#?       The options  -n  -v  and  -help  must be specified  first (leftmost)
#?       if they should apply for this script.
#?       The options  -n  -v  and  -help  can  only  passed to  o-saft.pl  in
#?       the Docker image, if they are preceeded by the  --  parameter.
#?
#? ENVIONMENT VARIABLES
#?       Following environment variables can be used to pass settings to the
#?       script:
#?
#?           o_saft_docker_name     - contains an image registry name
#?           o_saft_docker_tag      - contains an image tag
#?
#?       To get the build-in defaults use:
#?           $0 status
#?
#? VERSION
#?       @(#) o-saft-docker 1.2 17/07/20 07:36:43
#?
#? AUTHOR
#?      17-jul-17 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

tag=${o_saft_docker_tag};       tag=${tag:=17.07.17}
registry=${o_saft_docker_name}; registry=${registry:=owasp/o-saft}
image_name="${registry}:${tag}"
try=
exe=o-saft.pl

docker_hacker () {
	cat << EoHacker

	Information about the Dockerfile will come here soon ...

EoHacker
}

docker_usage () {
	cat << EoDescription

	O-Saft docker image is ready to run o-saft.pl, use:

		docker run --rm -it ${image_name} +info your.tld
	or:
		$0 +info your.tld

	The GUI  o-saft.tcl  will currently not work inside Docker.  However
	o-saft.tcl  may be started on the host and then use  o-saft.pl  from
	the Docker image, use:

		o-saft.tcl --docker

EoDescription
}

docker_status () {
 	image_id=`\docker images -q ${image_name}`
	cat << EoStatus
# using environment ...
#     o_saft_docker_name = $o_saft_docker_name
#     o_saft_docker_tag = $o_saft_docker_tag

# using registry name  ${registry}  and  tag  ${tag}  =  ${image_name}

# docker image id for ${image_name} is  $image_id

# docker images for ${registry} ...
EoStatus

	$try \docker images ${registry}
	echo
	echo "# docker processes ..."
	$try \docker ps -a
}

docker_build () {
	$try \docker build -f ./Dockerfile --force-rm -t ${image_name}
	$try \docker save  -o o-saft_docker.tar ${image_name}
	$try \docker rmi   `docker images ${image_name}`
	$try \docker load  -i o-saft_docker.tar
	$try \rm              o-saft_docker.tar
	$try \docker tag   ${image_name}  O-Saft
}

docker_osaft () {
	# this is the command for the default mode, passing all parameters
	$try \docker run --rm -it ${image_name} $@
}

docker_shell () {
	$try \docker run --rm -it --entrypoint=/bin/sh ${image_name}
}

docker_root () {
	$try \docker run --rm -it --entrypoint=/bin/sh -u root ${image_name}
}

my_help ()      {
	ich=${0##*/}
	\sed -ne "s/\$0/$ich/g" -e '/^#?/s/#?//p' $0
}

while [ $# -gt 0 ]; do
	case "$1" in
	  '-n')     try=echo; ;;
	  '-v')     set -x  ; ;;
	  '-help')  my_help;        exit 0; ;;
	  'usage')  docker_usage;   exit 0; ;;
	  'shell')  docker_shell;   exit 0; ;;
	  'root')   docker_root;    exit 0; ;;
	  'build')  docker_build;   exit 0; ;;
	  'status') docker_status;  exit 0; ;;
	  'hacker') docker_hacker;  exit 0; ;;
          '--')     shift; break; ;;
          *)               break; ;;
	esac
	shift
done

if [ $# -lt 1 ]; then
	# did not get any argument, print own usage
	my_help
	echo
	echo "**WARNING:  $0  called without parameters; nothing done."
	echo
	exit 2
fi

docker_osaft $@

exit

#! /usr/bin/make -rRf
#?
#? NAME
#?      Makefile    - makefile for help targets of O-Saft project
#?
#? SYNOPSYS
#?      make [options] [target] [...]
#?
#? DESCRIPTION
#?      Makefile with help targets for O-Saft project.  It also describes the
#?      (special) syntax used in all Makefiles.
#?
#? EXAMPLES
#?          make help.doc
#?          make help.syntax
#?          make macro macro=MAKEFILE
#?          make m-MAKEFILE
#?          make echo  echo=MAKEFILE
#?          make e-MAKEFILE
#?          make p-MAKEFILE
#?          make t-help.doc
#?
#? LIMITATIONS
#?       Requires GNU Make > 2.0.
#?
# HACKER's INFO
#.
#.   Syntax used in all Makefiles
#.      For extracting information from the Makefiles, i.e macros/variables and
#.      their definitions, following special syntax is used:
#.          * all texts for documentation (help) are stored in variables
#.          * all these variables are named with the prefix  HELP-
#.          * anything following the prefix is the name of an existing target,
#.            example:   HELP-doc  contains the description of the target  doc
#.          * variable names with prefix  HELP-_  are treated as header texts,
#.            example:   HELP-_help = ____ targets for help about Makefile _
#.          * variables used in  @echo  commands, are named with prefix  MORE-
#.
#.      Targets in the Makefiles are grouped.  Each group is headed by the help
#.      texts for the targets.  The first line of this group should be a header
#.      text describing the group. Example:
#.          HELP-_group     = _______________________________ some targets _
#.          HELP-help       = print overview of all targets
#.          HELP-doc        = same as help, but evaluates variables
#.      These variables are used by the  help  and  doc  target.  Each of these
#.      lines is printed as follows (example above):
#.                 _______________________________ some targets _
#.          help     - print overview of all targets
#.          doc      - same as help, but evaluates variables
#.
#.      To extract and format the texts, the targets use external tools, mainly
#.      awk,  sed  and  tr.  Each tool including its command line arguments  is
#.      defined as variable, see corresponding  EXE.*  variables.
#.
#.      All variable names used for help texts use - (dash) instead of . (dot).
#.      This simplifies matching the names, as the dash is not a meta character
#.      in RegEx and so must not be escaped.
#.
#.      Unfortunately some of the macros use variables of the Makefile,  like
#.      $(T), while other macros must use the TAB character verbatim,  which is
#.      difficult to identify by human eyes.
#.
#.      The main difference between the target  help  and  doc  is, that  help
#.      uses external tools to extract the information from the Makefile, while
#.      doc  uses  make's functionality to display the same information,  which
#.      also evaluates variables used in the targets. Both targets use the same
#.      text.
#.      The  EXE.*  macros used by these targets take care for the formatting.
#.      They rely on the above conventions for variable names.
#.
#.      Additional to the help targets described above, there are targets which
#.      show information about variables and targets:
#.           list, echo, show, macro, pmacro, target
#.      These targets show the information,  which is passed in a variable with
#.      the same name as the target itself. Example:
#.          make macro macro=MAKEFILE
#.      To simplify such command lines, a special pattern rule exists  for each
#.      of these targets. Example:
#.          make m-MAKEFILE
#.
#.      Naming conventions for targets:
#.          test.name    - public available targets use  .  (dot) as separator
#.          test-name    - internal and pattern rule targets use  -  (dash) as
#.                          separator
#.
#.   Makefiles and Includes
#.      To keep the make's functionality (targets) maintainable, multiple files
#.      are used. They are all named  Makefile  or  Makefile.SUFFIX,  where the
#.      SUFFIX  describes the content, somehow.  I.g. it should be  possible to
#.      use each of these Makefiles by its own, like:
#.           make -f Makefile.SUFFIX target
#.
#.      As GNU make's include functionality is difficult to use,  in particular
#.      when including files from sub-directories,  following trick is used:
#.          * sub-directories contain a symbolic link to . (itself)
#.          * Makefiles always include other files with relative paths
#.      Example:
#.          ./test/ (directory)  contains:  test -> .
#.          ./test/Makefile.cgi  contains:  include test/Makefile
#.      This avoid sophistcated syntax in the files itself, like:
#.          ifeq (test,$(findstring test,$(PWD)))                                          
#.              TEST.dir = .                                                                   
#.              # if called inside test directory, TEST.dir must be redifined       
#.          endif
#.
#.      Keep in mind, that GNU's make cannot manage recursive includes of the
#.      same file. This must be check before including, for example with (using
#.      our private  _SID.*  variable):
#.          ifeq (,$(_SIDtest))                                          
#.              include test/Makefile
#.          endif
#.
#.   Special Syntax here
#.      To extract the syntax documentation, all the lines start with  #. , see
#.      EXE.syntax  also.
#.
#? VERSION
#?      @(#) Makefile.help 1.6 18/06/08 17:54:59
#?
#? AUTHOR
#?      18-apr-18 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

MAKEFLAGS      += --no-builtin-variables --no-builtin-rules
.SUFFIXES:

first-help-target-is-default: help.doc

_SID.help       = 1.6

ALL.Makefiles  += Makefile.help

#_____________________________________________________________________________
#________________________________________________________________ variables __|

# internal variables
_TAB            = \\011
_NL             = \\012
_CR             = \\015
T               = $$""(_NL)

# internal help
# (for details about the commands, please see  Syntax  above)
_HELP_INFO_     = \# Name          | Description/Content
_HELP_LINE_     = \#---------------+------------------------------------------------------------
_HELP_HEADER_   = $(_HELP_LINE_)\012$(_HELP_INFO_)\012$(_HELP_LINE_)
_HELP_USAGE_    = **USAGE:  $(MAKE) $($@) '$($@)=your-query'

# tools used to gather information from herein
EXE.list        = awk '/^[_a-zA-Z][_a-zA-Z.]* *=.*/{print $$1}'
EXE.eval        = awk -F=    '/^HELP-_/{print "_f-"$$1}/^HELP-[^ _]/{sub(/HELP-/,"");print "f-"$$1}'
EXE.help        = sed -n -e 's/^HELP-_[^=]*=[" ]*\([^"]*\)"*/		\1/p' \
			 -e 's/^HELP-\(.*\)[	 ]*=[" ]*\([^"]*\)"*/ \1    - \2/p'
EXE.macro       = sed -n -e '/^$($@)[ 	:+]*=/{' \
			 -e ':m' -e 'p' -e '/\\$$/{' -e 'n' -e 'bm' -e '}' -e '}'
EXE.pmacro      = sed -n -e '/.*$($@).*[        :+]*=/{' \
			 -e ':m' -e 'p' -e '/\\$$/{' -e 'n' -e 'bm' -e '}' -e '}'
EXE.target      = sed -n -e ':t' -e '/^[^:\#]*$($@)[^:\#]*[:]/{' \
			 -e ':c' -e 'p' -e 'n' -e '/^       /bc' -e 'bt' -e '}'
EXE.syntax      = sed -n -e 's/^\#\.//p'
EXE.wordperline = tr -s " $(_TAB)" "$(_NL)$(_NL)"
#               # must use " so that make's variables are evaluated correctly
EXE.wordperline = awk '{for(i=1;i<=NF;i++){printf("\t\t  %s\n",$$i)}}'

#_____________________________________________________________________________
#_____________________________________________________________ help targets __|

MORE-help       = " \
\#              __________________________ targets for help about Makefile _$(_NL)\
 list           - list all macro names (alias: vars)$(_NL)\
 e-MACRO        - show content of MACRO expanded (all in one line)$(_NL)\
 s-MACRO        - show content of MACRO expanded (one word per line)$(_NL)\
 m-MACRO        - show definition of MACRO as is --exact macro match$(_NL)\
 p-MACRO        - show all definitions of MACRO as is --macro pattern match$(_NL)\
 t-TARGET       - show TARGET --exact target match$(_NL)\
$(_NL)\
\#              ________________________________ targets for documentation _$(_NL)\
 help.doc       - print this documentation$(_NL)\
 help.test      - print documentation about test targets$(_NL)\
 help.critic    - print documentation about perlcritic targets$(_NL)\
 help.syntax    - print documentation about syntax used in Makefile.*$(_NL)\
"

help.doc:
	@echo " $(_HELP_LINE_)$(_NL) $(_HELP_INFO_)$(_NL) $(_HELP_LINE_)$(_NL)"
	@echo $(MORE-help) ; # no quotes!

help.syntax:
	$(EXE.syntax) Makefile.help

.PHONY: help.doc help.syntax

#dbx _isempty:  @echo "# target: $($@) - $($($@))."
# NOTE: following target is adapted to be use in echo, show, macro and target
#       targets, hence the target name must be recursively evaluated, that's
#       why we use  $($($@)) instead of $($@)
_notempty:
	@if [ '$($($@))' = '' ]; then \
	    $(ECHO) "$(HELP-$($@))"; \
	    $(ECHO) "$(_HELP_USAGE_)"; \
	    exit 1; \
	fi;
	@$(ECHO) "$(_HELP_HEADER_)"

_line:
	@echo ""
	@$(ECHO) "$(_TAB)$(_TAB)$($($@))"

.PHONY: _notempty _line

list:
	@$(TARGET_VERBOSE)
	@$(EXE.list) $(ALL.Makefiles)
vars: list

eval:
	@$(TARGET_VERBOSE)
	@$(ECHO) "$($@)$(_TAB)$(_TAB)- $(HELP-$($@))"

echo:
	@$(TARGET_VERBOSE)
	@$(ECHO) '$($($@))'

show: _notempty=show
show: _notempty
	@$(TARGET_VERBOSE)
	@$(ECHO) '$($@) = '
	@$(ECHO) '$($($@))' | $(EXE.wordperline)

macro: _notempty=macro
macro: _notempty
	@$(TARGET_VERBOSE)
	@$(EXE.macro) $(ALL.Makefiles)
makro: macro

pmacro: _notempty=pmacro
pmacro: _notempty
	@$(TARGET_VERBOSE)
	@$(EXE.pmacro) $(ALL.Makefiles)

target: _notempty=target
target: _notempty
	@$(TARGET_VERBOSE)
	@$(EXE.target) $(ALL.Makefiles)

# following rules are shortcuts for the above targets
e-%:
	@$(MAKE) -s echo=$* echo
f-%:
	@$(MAKE) -s eval=$* eval
_f-%:
	@$(MAKE) -s _line=$* _line
s-%:
	@$(MAKE) -s show=$* show
m-%:
	@$(MAKE) -s macro=$* macro
p-%:
	@$(MAKE) -s pmacro=$* pmacro
t-%:
	@$(MAKE) -s target=$* target

.PHONY: list vars eval echo show macro pmacro target


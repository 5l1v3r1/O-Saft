#! /usr/bin/make -rRf
#?
#? NAME
#?      Makefile        - makefile for help targets of O-Saft project
#?
#? SYNOPSYS
#?      make [options] [target] [...]
#?
#? DESCRIPTION
#?      Traditional Makefile with help targets for O-Saft project.
#?      For details please see ../Makefile .
#?
#? LIMITATIONS
#?       Requires GNU Make > 2.0.
#?
# HACKER's INFO
#       Description see  HELP.doc  below (also used in default target in this
#       Makefile).
#
#? VERSION
#?      @(#) Makefile.help 1.4 18/05/27 13:40:20
#?
#? AUTHOR
#?      18-apr-18 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

MAKEFLAGS      += --no-builtin-variables --no-builtin-rules
.SUFFIXES:

first-help-target-is-default: help.doc

_SID.help       = 1.4
# define our own SID as variable, if needed ...

#_____________________________________________________________________________
#________________________________________________________________ variables __|

# internal variables
_TAB            = \\011
_NL             = \\012
_CR             = \\015
T               = $$""(_NL)

# documentation for syntax used herein
MORE-syntax = $(_NL)\
For extracting information from the Makefiles,  for example macros/variables $(_NL)\
and their definitions, following special syntax is used: $(_NL)\
$(_TAB)* all texts for documentation (help) are stored in variables $(_NL)\
$(_TAB)* all these variables are named with the prefix  HELP- $(_NL)\
$(_TAB)* anything following the prefix is the name of an existing target $(_NL)\
$(_TAB)  example:   HELP-doc  contains the description of the target  doc $(_NL)\
$(_TAB)* variable names with prefix  HELP-_  are treated as header texts $(_NL)\
$(_TAB)  example:   HELP-_help = ____ targets for help about Makefile _ $(_NL)\
 $(_NL)\
Targets in the Makefiles are grouped. Each group is headed by the help texts $(_NL)\
for the targets. The first line of this group should be a header text descr- $(_NL)\
ibing the group. Example: $(_NL)\
$(_TAB)HELP-_group     = _______________________________ some targets _ $(_NL)\
$(_TAB)HELP-help       = print overview of all targets $(_NL)\
$(_TAB)HELP-doc        = same as help, but evaluates variables $(_NL)\
These variables are used by the  help  and  doc  target. Each of these lines $(_NL)\
is printed as follows (example above): $(_NL)\
$(_TAB)         _______________________________ some targets _ $(_NL)\
$(_TAB)help     - print overview of all targets $(_NL)\
$(_TAB)doc      - same as help, but evaluates variables $(_NL)\
 $(_NL)\
To extract and format the texts, the targets use some external tools, mainly $(_NL)\
awk,  sed  and  tr.  Each tool with its command line arguments is defined as $(_NL)\
variable, see corresponding  EXE.*  variables. $(_NL)\
 $(_NL)\
All variable names used for help texts do not contain . (dot), but - (dash). $(_NL)\
This simplifies matching the names, because the dash is not a meta character $(_NL)\
in RegEx and so must not be escaped. $(_NL)\
 $(_NL)\
Unfortunately some of the macros use variables of the Makefile, like $(T), $(_NL)\
while other macros must use the TAB character verbatim,  which  is difficult $(_NL)\
to identify by human eyes. $(_NL)\
 $(_NL)\
The main difference between the target  help  and  doc  is, that  help  uses $(_NL)\
external tools to extract the information from the Makefile while  doc  uses $(_NL)\
make's functionality to display  the same information,  which also evaluates $(_NL)\
variables used in the targets. Both targets use the same text. $(_NL)\
The  EXE.*  macros used by these targets take care for the formatting.  They $(_NL)\
rely on the above conventions for variable names. $(_NL)\
 $(_NL)\
Additional to the help targets described above, there are targets which show $(_NL)\
information about variables and targets: $(_NL)\
$(_TAB) list, echo, show, macro, pmacro, target $(_NL)\
These targets show the information,  which is passed in a variable  with the $(_NL)\
same name as the target itself. Example: $(_NL)\
$(_TAB) make macro macro=MAKEFILE $(_NL)\
To simplify such command lines,  a special pattern rule exists  for each of $(_NL)\
these targets. Example: $(_NL)\
$(_TAB) make m-MAKEFILE $(_NL)\
 $(_NL)\
 $(_NL)\
Naming conventions for targets: $(_NL)\
$(_TAB) test.name    - public available targets use  .  (dot) as separator $(_NL)\
$(_TAB) test-name    - internal and pattern rule targets use  -  (dash) as $(_NL)\
$(_TAB)$(_TAB)$(_TAB)separator $(_NL)\


# internal help
# (for details about the commands, please see HELP.doc above)
_HELP_INFO_     = \# Name          | Description/Content
_HELP_LINE_     = \#---------------+------------------------------------------------------------
_HELP_HEADER_   = $(_HELP_LINE_)\012$(_HELP_INFO_)\012$(_HELP_LINE_)
_HELP_USAGE_    = **USAGE:  $(MAKE) $($@) '$($@)=your-query'

# tools used to gather information from herein
EXE.list        = awk '/^[_a-zA-Z][_a-zA-Z.]* *=.*/{print $$1}'
EXE.eval        = awk -F=    '/^HELP-_/{print "_f-"$$1}/^HELP-[^ _]/{sub(/HELP-/,"");print "f-"$$1}'
EXE.help        = sed -n -e 's/^HELP-_[^=]*=[" ]*\([^"]*\)"*/		\1/p' \
			 -e 's/^HELP-\(.*\)[	 ]*=[" ]*\([^"]*\)"*/ \1    - \2/p'
EXE.macro       = sed -n -e '/^$($@)[ 	:+]*=/{' \
			 -e ':m' -e 'p' -e '/\\$$/{' -e 'n' -e 'bm' -e '}' -e '}'
EXE.pmacro      = sed -n -e '/.*$($@).*[        :+]*=/{' \
			 -e ':m' -e 'p' -e '/\\$$/{' -e 'n' -e 'bm' -e '}' -e '}'
EXE.target      = sed -n -e ':t' -e '/^[^:\#]*$($@)[^:\#]*[:]/{' \
			 -e ':c' -e 'p' -e 'n' -e '/^       /bc' -e 'bt' -e '}'
EXE.wordperline = tr -s " $(_TAB)" "$(_NL)$(_NL)"
#               # must use " so that make's variables are evaluated correctly
EXE.wordperline = awk '{for(i=1;i<=NF;i++){printf("\t\t  %s\n",$$i)}}'

#_____________________________________________________________________________
#_____________________________________________________________ help targets __|

MORE-help       = " \
\#              __________________________ targets for help about Makefile _$(_NL)\
 list           - list all macro names (alias: vars)$(_NL)\
 e-MACRO        - show content of MACRO expanded (all in one line)$(_NL)\
 s-MACRO        - show content of MACRO expanded (one word per line)$(_NL)\
 m-MACRO        - show definition of MACRO as is --exact macro match$(_NL)\
 p-MACRO        - show all definitions of MACRO as is --macro pattern match$(_NL)\
 t-TARGET       - show TARGET --exact target match$(_NL)\
$(_NL)\
\#              ________________________________ targets for documentation _$(_NL)\
 help.doc       - print this documentation$(_NL)\
 help.test      - print documentation about test targets$(_NL)\
 help.critic    - print documentation about perlcritiv targets$(_NL)\
 help.syntax    - print documentation about syntax used in Makefile.*$(_NL)\
"

help.doc:
	@echo " $(_HELP_LINE_)$(_NL) $(_HELP_INFO_)$(_NL) $(_HELP_LINE_)$(_NL)"
	@echo $(MORE-help) ; # no quotes!

help.syntax:
	@echo "$(MORE-syntax)"

#dbx _isempty:  @echo "# target: $($@) - $($($@))."
# NOTE: following target is adapted to be use in echo, show, macro and target
#       targets, hence the target name must be recursively evaluated, that's
#       why we use  $($($@)) instead of $($@)
_notempty:
	@if [ '$($($@))' = '' ]; then \
	    $(ECHO) "$(HELP-$($@))"; \
	    $(ECHO) "$(_HELP_USAGE_)"; \
	    exit 1; \
	fi;
	@$(ECHO) "$(_HELP_HEADER_)"

_line:
	@echo ""
	@$(ECHO) "$(_TAB)$(_TAB)$($($@))"

.PHONY: _notempty _line

list:
	@$(TARGET_VERBOSE)
	@$(EXE.list) $(ALL.Makefiles)
vars: list

eval:
	@$(TARGET_VERBOSE)
	@$(ECHO) "$($@)$(_TAB)$(_TAB)- $(HELP-$($@))"

echo:
	@$(TARGET_VERBOSE)
	@$(ECHO) '$($($@))'

show: _notempty=show
show: _notempty
	@$(TARGET_VERBOSE)
	@$(ECHO) '$($@) = '
	@$(ECHO) '$($($@))' | $(EXE.wordperline)

macro: _notempty=macro
macro: _notempty
	@$(TARGET_VERBOSE)
	@$(EXE.macro) $(ALL.Makefiles)
makro: macro

pmacro: _notempty=pmacro
pmacro: _notempty
	@$(TARGET_VERBOSE)
	@$(EXE.pmacro) $(ALL.Makefiles)

target: _notempty=target
target: _notempty
	@$(TARGET_VERBOSE)
	@$(EXE.target) $(ALL.Makefiles)

# following rules are shortcuts for the above targets
e-%:
	@$(MAKE) -s echo=$* echo
f-%:
	@$(MAKE) -s eval=$* eval
_f-%:
	@$(MAKE) -s _line=$* _line
s-%:
	@$(MAKE) -s show=$* show
m-%:
	@$(MAKE) -s macro=$* macro
p-%:
	@$(MAKE) -s pmacro=$* pmacro
t-%:
	@$(MAKE) -s target=$* target

.PHONY: list vars eval echo show macro pmacro target

